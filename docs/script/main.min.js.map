{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/main.ts","webpack:///./src/ts/parsing/foward-string-reader.ts","webpack:///./src/ts/parsing/parser.ts","webpack:///./src/ts/parsing/parsing-error.ts","webpack:///./src/ts/nodes/aggregation-node.ts","webpack:///./src/ts/nodes/comparison-node.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","testedStrings","analyze","reader","parseString","toString","e","window","addEventListener","toAnalyze","console","log","errorMessageElement","document","getElementById","inputElement","resultElement","updateResult","rootNode","textToAnalyze","textContent","stringReader","innerHTML","appendChild","toHTML","style","overflow","height","scrollHeight","event","target","nodes","querySelectorAll","length","classList","remove","hovered","closest","add","startIndex","dataset","endIndex","inputText","push","createTextNode","substring","span","createElement","className","stringToRead","this","cursor","endOfString","next","current","start","end","skipWhitespaces","numberOfWhitespaces","match","ForwardStringReader","input","result","Parser","parseNode","currentIndex","node","nbClosingParenthesisExpected","parseNodeInner","isAggregationCharacter","partialNode","children","isValid","position","message","ParsingError","AggregationOperation","operation","AND","OR","NOT","character","childrenStrList","child","join","divElement","operatorText","operatorElement","AggregationNode","inner","ComparisonNode"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import ForwardStringReader from \"./parsing/foward-string-reader\";\r\nimport Parser from \"./parsing/parser\";\r\n\r\nimport INode from \"./nodes/inode\";\r\n\r\nconst testedStrings: string[] = [\r\n    \"\",\r\n    \"()\",\r\n    \"((()))\",\r\n    \"  (  ( ()) )\",\r\n    \"(\",\r\n    \" ( (())\",\r\n    \"(()&\",\r\n    \"(hihi)\",\r\n    \"( (hihi)       )\",\r\n    \"&(hoho)(huhu)\",\r\n    \"  |   (hoho)   (huhu)\",\r\n    \"&((  |(hihi)(huhu)))   (huhu)\",\r\n    \"&()(huhu)(haha)\",\r\n    \"!(huhu)\",\r\n    \"!(huhu)(haha)\",\r\n];\r\n\r\nfunction analyze(reader: ForwardStringReader): string {\r\n    try {\r\n        const node: INode = Parser.parseString(reader);\r\n        return \"valid '\" + node.toString() + \"'\";\r\n    } catch (e) {\r\n        return e.toString();\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\", function analyzeAll(): void {\r\n    for (const toAnalyze of testedStrings) {\r\n        console.log(toAnalyze + \" : \" + analyze(new ForwardStringReader(toAnalyze)));\r\n    }\r\n\r\n    const errorMessageElement = document.getElementById(\"error-messages\");\r\n    const inputElement = document.getElementById(\"input\") as HTMLTextAreaElement;\r\n    const resultElement = document.getElementById(\"result\");\r\n\r\n    function updateResult(): void {\r\n        const textToAnalyze: string = inputElement.textContent;\r\n        const stringReader = new ForwardStringReader(textToAnalyze);\r\n\r\n        let rootNode: INode;\r\n        try {\r\n            rootNode = Parser.parseString(stringReader);\r\n\r\n            errorMessageElement.textContent = \"\";\r\n            resultElement.innerHTML = \"\";\r\n            resultElement.appendChild(rootNode.toHTML());\r\n        } catch (e) {\r\n            resultElement.innerHTML = \"\";\r\n            errorMessageElement.textContent = e.toString();\r\n        }\r\n    }\r\n\r\n    function updateInputHeight(): void {\r\n        const inputPadding = 8;\r\n\r\n        inputElement.style.overflow = 'hidden';\r\n        inputElement.style.height = \"0\";\r\n        inputElement.style.height = (inputElement.scrollHeight - 2 * inputPadding) + 'px';\r\n    }\r\n\r\n    inputElement.addEventListener(\"keyup\", updateInputHeight);\r\n    inputElement.addEventListener(\"keyup\", updateResult);\r\n\r\n    function highlightHoveredNode(event: MouseEvent): void {\r\n        const target = event.target as HTMLElement;\r\n\r\n        const nodes = resultElement.querySelectorAll(\".node\");\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            nodes[i].classList.remove(\"hovered\");\r\n        }\r\n\r\n        const hovered = (target as HTMLElement).closest(\"#result .node\") as HTMLElement;\r\n        if (hovered !== null) {\r\n            hovered.classList.add(\"hovered\");\r\n\r\n            const startIndex = +hovered.dataset.startIndex;\r\n            const endIndex = +hovered.dataset.endIndex;\r\n\r\n            const inputText = inputElement.textContent;\r\n            const nodes: any[] = [];\r\n            nodes.push(document.createTextNode(inputText.substring(0, startIndex)));\r\n\r\n            const span = document.createElement(\"span\");\r\n            span.className = \"hovered\";\r\n            span.textContent = inputText.substring(startIndex, endIndex);\r\n            nodes.push(span);\r\n\r\n            nodes.push(document.createTextNode(inputText.substring(endIndex)));\r\n            \r\n            inputElement.innerHTML = \"\";\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                inputElement.appendChild(nodes[i]);\r\n            }\r\n        } else {\r\n            inputElement.textContent = inputElement.textContent;\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", highlightHoveredNode);\r\n\r\n    inputElement.textContent = \"&((  |(hihi)(huhu)))   (huhu)\";\r\n    updateResult();\r\n});\r\n\r\n","/** Class for reading string character by character, only in forward direction.\r\n * It still allows substrings to be extracted from the string.\r\n */\r\nclass ForwardStringReader {\r\n    private readonly stringToRead: string;\r\n    private cursor: number;\r\n\r\n    public constructor(stringToRead: string) {\r\n        this.stringToRead = stringToRead;\r\n        this.cursor = 0;\r\n    }\r\n\r\n    /** Retrieves the character at the cursor's current position, or null if it reached end of string. */\r\n    public get current(): string | null {\r\n        return this.endOfString ? null : this.stringToRead[this.cursor];\r\n    }\r\n\r\n    /** Retrieves the 0-based current position of the cursor. */\r\n    public get currentIndex(): number {\r\n        return this.cursor;\r\n    }\r\n\r\n    /** Moves the cursor forward and returns the new selected character, or null if te cursor reached the end of the string. */\r\n    public next(): string | null {\r\n        if (!this.endOfString) {\r\n            this.cursor++;\r\n        }\r\n        return this.current;\r\n    }\r\n\r\n    public get endOfString(): boolean {\r\n        return this.cursor >= this.stringToRead.length;\r\n    }\r\n\r\n    /** Returns the length of the read string. */\r\n    public get length(): number {\r\n        return this.stringToRead.length;\r\n    }\r\n\r\n    public substring(start: number, end: number): string {\r\n        return this.stringToRead.substring(start, end);\r\n    }\r\n\r\n    /* Returns the number of skipped whitespace characters */\r\n    public skipWhitespaces(): number {\r\n        let numberOfWhitespaces = 0;\r\n\r\n        while (this.current && this.current.match(/\\s/)) {\r\n            numberOfWhitespaces++;\r\n            this.next();\r\n        }\r\n\r\n        return numberOfWhitespaces;\r\n    }\r\n}\r\n\r\nexport default ForwardStringReader;\r\n","import ForwardStringReader from \"./foward-string-reader\";\r\nimport ParsingError from \"./parsing-error\";\r\n\r\nimport AggregationNode from \"../nodes/aggregation-node\";\r\nimport ComparisonNode from \"../nodes/comparison-node\";\r\nimport LdapNode from \"../nodes/inode\";\r\n\r\nclass Parser {\r\n    public static parseString(input: ForwardStringReader): LdapNode {\r\n        const result: LdapNode = Parser.parseNode(input);\r\n        \r\n        if (!input.endOfString) {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /** Leaves the cursor after the last ')' */\r\n    private static parseNode(input: ForwardStringReader): LdapNode {\r\n        let nbClosingParenthesisExpected = 0;\r\n        let node: LdapNode = null;\r\n\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            nbClosingParenthesisExpected++;\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (input.current === \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid empty node\");\r\n        }\r\n\r\n        node = Parser.parseNodeInner(input);\r\n\r\n        if (!input.endOfString && input.current !== \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        while (input.current === \")\" && nbClosingParenthesisExpected > 0) {\r\n            nbClosingParenthesisExpected--;\r\n\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (nbClosingParenthesisExpected > 0) {\r\n            throw new ParsingError(input.currentIndex, \"Missing closing parenthesis\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private static parseNodeInner(input: ForwardStringReader): LdapNode {\r\n        input.skipWhitespaces();\r\n\r\n        let node : LdapNode = null;\r\n        if (AggregationNode.isAggregationCharacter(input.current)) {\r\n            const partialNode = new AggregationNode(input.current);\r\n            partialNode.startIndex = input.currentIndex;\r\n\r\n            input.next();\r\n            input.skipWhitespaces();\r\n            while (input.current === \"(\") {\r\n                partialNode.children.push(Parser.parseNode(input));\r\n                input.skipWhitespaces();\r\n            }\r\n\r\n            partialNode.endIndex = input.currentIndex;\r\n\r\n            if (!partialNode.isValid()) {\r\n                throw new ParsingError(input.currentIndex, \"Invalid agregation node\");\r\n            }\r\n\r\n            node = partialNode;\r\n        } else {\r\n            const startIndex = input.currentIndex;\r\n            while (!input.endOfString && input.current !== \")\") {\r\n                input.next();\r\n            }\r\n            node = new ComparisonNode(input.substring(startIndex, input.currentIndex));\r\n            node.startIndex = startIndex;\r\n            node.endIndex = input.currentIndex;\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n","/* Class for storing parsing errors */\r\nclass ParsingError {\r\n    public readonly position: number;\r\n    public readonly message: string;\r\n\r\n    constructor(position: number, message: string) {\r\n        this.position = position;\r\n        this.message = message;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"Parsing error at \" + this.position + \": \" + this.message;\r\n    }\r\n}\r\n\r\nexport default ParsingError;\r\n","import INode from \"./inode\";\r\n\r\nenum AggregationOperation {\r\n    AND,\r\n    OR,\r\n    NOT,\r\n}\r\n\r\nclass AggregationNode implements INode {\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n    \r\n    public operation: AggregationOperation = null;\r\n    public children: INode[] = null;\r\n\r\n    public static isAggregationCharacter(character: string): boolean {\r\n        return character === \"&\" || character === \"|\" || character === \"!\";\r\n    }\r\n\r\n    public constructor(operation: string) {\r\n        this.children = [];\r\n\r\n        if (operation === \"&\") {\r\n            this.operation = AggregationOperation.AND;\r\n        } else if (operation === \"|\") {\r\n            this.operation = AggregationOperation.OR;\r\n        } else if (operation === \"!\") {\r\n            this.operation = AggregationOperation.NOT;\r\n        } else {\r\n            this.operation = null;\r\n        }\r\n    }\r\n\r\n    public isValid(): boolean {\r\n        switch (this.operation) {\r\n            case AggregationOperation.AND:\r\n            case AggregationOperation.OR:\r\n                return this.children.length >= 2;\r\n            case AggregationOperation.NOT:\r\n                return this.children.length === 1;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.operation === AggregationOperation.NOT) {\r\n            return \"NOT \" + this.children[0].toString();\r\n        } else if (this.operation === AggregationOperation.AND) {\r\n            const childrenStrList: string[] = [];\r\n            for (const child of this.children) {\r\n                childrenStrList.push(child.toString());\r\n            }\r\n            return \"(\" + childrenStrList.join(\") AND (\") + \")\";\r\n        } else if (this.operation === AggregationOperation.OR) {\r\n            const childrenStrList: string[] = [];\r\n            for (const child of this.children) {\r\n                childrenStrList.push(child.toString());\r\n            }\r\n            return \"(\" + childrenStrList.join(\") OR (\") + \")\";\r\n        }\r\n\r\n        return \"<empty>\";\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n        \r\n        if (this.operation === AggregationOperation.AND || this.operation === AggregationOperation.OR) {\r\n            divElement.appendChild(this.children[0].toHTML());\r\n\r\n            const operatorText = (this.operation === AggregationOperation.AND) ? \"and\" : \"or\";\r\n\r\n            for (let i = 1; i < this.children.length; i++) {\r\n                const operatorElement = document.createElement(\"div\");\r\n                operatorElement.className = \"operator\";\r\n                operatorElement.textContent = operatorText;\r\n\r\n                divElement.appendChild(operatorElement);\r\n                divElement.appendChild(this.children[i].toHTML());\r\n            }\r\n        } else if (this.operation === AggregationOperation.NOT) {\r\n            const operatorElement = document.createElement(\"span\");\r\n            operatorElement.className = \"operator\";\r\n            operatorElement.textContent = \"not \";\r\n\r\n            divElement.appendChild(operatorElement);\r\n        }\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport default AggregationNode;\r\n","import INode from \"./inode\";\r\n\r\nclass ComparisonNode implements INode {\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public inner: string;\r\n\r\n    public constructor (inner: string) {\r\n        this.inner = inner;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.inner;\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\")\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n        divElement.textContent = this.inner;\r\n\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport default ComparisonNode;"],"sourceRoot":""}