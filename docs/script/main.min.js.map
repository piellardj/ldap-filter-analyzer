{"version":3,"sources":["webpack://ldap-filter-analyzer/./src/ts/input-element.ts","webpack://ldap-filter-analyzer/./src/ts/main.ts","webpack://ldap-filter-analyzer/./src/ts/nodes/aggregation-node.ts","webpack://ldap-filter-analyzer/./src/ts/nodes/comparison-node.ts","webpack://ldap-filter-analyzer/./src/ts/parsing/foward-string-reader.ts","webpack://ldap-filter-analyzer/./src/ts/parsing/parser.ts","webpack://ldap-filter-analyzer/./src/ts/parsing/parsing-error.ts","webpack://ldap-filter-analyzer/webpack/bootstrap","webpack://ldap-filter-analyzer/webpack/startup"],"names":["elementId","this","element","document","getElementById","textContent","text","clearHighlight","applyClassToSubstring","startIndex","endIndex","classname","inputText","length","left","createTextNode","substring","middle","createElement","className","right","innerHTML","appendChild","InputElement","Element","prototype","matches","msMatchesSelector","closest","criteria","current","parentElement","window","addEventListener","errorMessageElement","inputElement","analyzeButton","resultElement","lastText","updateResult","textToAnalyze","rootNode","stringReader","parseString","toHTML","e","toString","parsingError","position","event","keyCode","preventDefault","hoveredNode","target","highlightCleared","nodes","querySelectorAll","i","classList","contains","remove","add","dataset","AggregationOperation","operation","children","AND","OR","NOT","isAggregationCharacter","character","testValidity","childrenStrList","child","push","join","divElement","operatorText","operatorElement","childElement","AggregationNode","EComparison","lefthand","righthand","comparison","EQUALS","IS_EMPTY","realRighthandStart","EXISTS","realRighthandEnd","CONTAINS","ENDS_WITH","STARTS_WITH","isComparisonCharacter","GREATER_THAN","GREATER_OR_EQUAL_THAN","LOWER_THAN","LOWER_OR_EQUAL_THAN","PROXIMITY","leftElement","rightElement","comparisonElement","ComparisonNode","stringToRead","cursor","endOfString","next","start","end","skipWhitespaces","numberOfWhitespaces","match","ForwardStringReader","input","result","Parser","parseNode","currentIndex","node","nbClosingParenthesisExpected","parseNodeInner","parseNodeInnerAggregation","parseNodeInnerComparison","partialNode","rightEndIndex","leftStartIndex","leftEndIndex","rightStartIndex","needToReadNextCharacter","message","ParsingError","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"uFAAA,iBAGI,WAAmBA,GACfC,KAAKC,QAAUC,SAASC,eAAeJ,GAmC/C,OAhCI,sBAAW,mBAAI,C,IAAf,WACI,OAAOC,KAAKC,QAAQG,a,IAExB,SAAgBC,GACZL,KAAKC,QAAQG,YAAcC,G,gCAGxB,YAAAC,eAAP,WACIN,KAAKK,KAAOL,KAAKC,QAAQG,aAGtB,YAAAG,sBAAP,SAA6BC,EAAoBC,EAAkBC,GAC/D,IAAMC,EAAYX,KAAKK,KAEnBG,GAAcG,EAAUC,SACxBJ,EAAaG,EAAUC,OAAS,EAChCH,EAAWE,EAAUC,QAGzB,IAAMC,EAAOX,SAASY,eAAeH,EAAUI,UAAU,EAAGP,IAEtDQ,EAASd,SAASe,cAAc,QACtCD,EAAOE,UAAYR,EACnBM,EAAOZ,YAAcO,EAAUI,UAAUP,EAAYC,GAErD,IAAMU,EAAQjB,SAASY,eAAeH,EAAUI,UAAUN,IAE1DT,KAAKC,QAAQmB,UAAY,GACzBpB,KAAKC,QAAQoB,YAAYR,GACzBb,KAAKC,QAAQoB,YAAYL,GACzBhB,KAAKC,QAAQoB,YAAYF,IAEjC,EAvCA,GAyCA,UAAeG,G,yJCzCf,gBACA,YAIA,YAIAC,QAAQC,UAAUC,QAAUF,QAAQC,UAAUC,SAAYF,QAAQC,UAAkBE,uBAE3C,IAA9BH,QAAQC,UAAUG,UACzBJ,QAAQC,UAAUG,QAAU,SAAiBC,GAGzC,IAFA,IAAIC,EAAU7B,KAEP6B,IAAYA,EAAQJ,QAAQG,IAC/BC,EAAUA,EAAQC,cAGtB,OAAOD,IAIfE,OAAOC,iBAAiB,QAAQ,WAC5B,IAAMC,EAAsB/B,SAASC,eAAe,kBAC9C+B,EAAe,IAAI,UAAa,SAChCC,EAAgBjC,SAASC,eAAe,mBACxCiC,EAAgBlC,SAASC,eAAe,UAE1CkC,EAAWH,EAAa7B,KAC5B,SAASiC,IACL,IAAMC,EAAwBL,EAAa7B,KAE3C,GAAIkC,IAAkBF,EAAtB,CAIAA,EAAWE,EAEX,IAEIC,EAFEC,EAAe,IAAI,UAAoBF,GAG7C,IACIC,EAAW,UAAOE,YAAYD,GAE9BR,EAAoB7B,YAAc,GAClCgC,EAAchB,UAAY,GAC1BgB,EAAcf,YAAYmB,EAASG,UACrC,MAAOC,GACLR,EAAchB,UAAY,GAC1Ba,EAAoB7B,YAAcwC,EAAEC,WAEpC,IAAMC,EAAeF,EACrBV,EAAa3B,sBAAsBuC,EAAaC,SAAUD,EAAaC,SAAW,EAAG,eAnBrFV,EAAWE,EAuBnBJ,EAAcH,iBAAiB,QAASM,GACxCJ,EAAajC,QAAQ+B,iBAAiB,WAAW,SAACgB,GACxB,KAAlBA,EAAMC,UACND,EAAME,iBACNZ,QA4BRpC,SAAS8B,iBAAiB,aAxB1B,SAA8BgB,GAM1B,IALA,IAAMG,EAAeH,EAAMI,OAAuBzB,QAAQ,iBAEtD0B,GAAmB,EAEjBC,EAAQlB,EAAcmB,iBAAiB,SACpCC,EAAI,EAAGA,EAAIF,EAAM1C,OAAQ4C,IAC1BF,EAAME,KAAOL,GAAeG,EAAME,GAAGC,UAAUC,SAAS,aACxDL,GAAmB,EACnBC,EAAME,GAAGC,UAAUE,OAAO,YAIlC,GAAoB,OAAhBR,GAAyBA,EAAYM,UAAUC,SAAS,WAMjDL,GACPnB,EAAa5B,qBAPuD,CACpE6C,EAAYM,UAAUG,IAAI,WAE1B,IAAMpD,GAAc2C,EAAYU,QAAQrD,WAClCC,GAAY0C,EAAYU,QAAQpD,SACtCyB,EAAa3B,sBAAsBC,EAAYC,EAAU,eAQjEyB,EAAa7B,KAAO,wIACpBiC,Q,yJC5FJ,IAGKwB,EAHL,aAGA,SAAKA,GACD,iBACA,eACA,iBAHJ,CAAKA,MAAoB,KAMzB,iBAWI,WAAmBC,GAHZ,KAAAA,UAAkC,KAClC,KAAAC,SAAoB,KAGvBhE,KAAKgE,SAAW,GAGZhE,KAAK+D,UADS,MAAdA,EACiBD,EAAqBG,IACjB,MAAdF,EACUD,EAAqBI,GACjB,MAAdH,EACUD,EAAqBK,IAErB,KAyE7B,OA7FkB,EAAAC,uBAAd,SAAqCC,GACjC,MAAqB,MAAdA,GAAmC,MAAdA,GAAmC,MAAdA,GAuB9C,YAAAC,aAAP,WACI,OAAQtE,KAAK+D,WACT,KAAKD,EAAqBG,IAC1B,KAAKH,EAAqBI,GACtB,GAAIlE,KAAKgE,SAASpD,OAAS,EACvB,MAAM,IAAI,UAAaZ,KAAKS,SAAU,gFAE1C,MACJ,KAAKqD,EAAqBK,IACtB,GAA6B,IAAzBnE,KAAKgE,SAASpD,OACd,MAAM,IAAI,UAAaZ,KAAKS,SAAU,uEACnC,GAAIT,KAAKgE,SAASpD,QAAU,EAC/B,MAAM,IAAI,UAAaZ,KAAKgE,SAAS,GAAGvD,SAAU,8CAEtD,MACJ,QACI,MAAM,IAAI,UAAaT,KAAKQ,WAAY,MAI7C,YAAAqC,SAAP,WACI,GAAI7C,KAAK+D,YAAcD,EAAqBK,IACxC,MAAO,KAAOnE,KAAKgE,SAAS,GAAGnB,WAAa,IAIhD,IADA,IAAM0B,EAA4B,GACd,MAAAvE,KAAKgE,SAAL,eAAe,CAA9B,IAAMQ,EAAK,KACZD,EAAgBE,KAAKD,EAAM3B,YAG/B,OAAI7C,KAAK+D,YAAcD,EAAqBG,IACjC,KAAOM,EAAgBG,KAAK,IAAM,IAClC1E,KAAK+D,YAAcD,EAAqBI,GACxC,KAAOK,EAAgBG,KAAK,IAAM,IAEtC,WAGJ,YAAA/B,OAAP,WACI,IAAMgC,EAAazE,SAASe,cAAc,OAK1C,GAJA0D,EAAWzD,UAAY,OACvByD,EAAWd,QAAQrD,WAAaR,KAAKQ,WAAWqC,WAChD8B,EAAWd,QAAQpD,SAAWT,KAAKS,SAASoC,WAExC7C,KAAK+D,YAAcD,EAAqBG,KAAOjE,KAAK+D,YAAcD,EAAqBI,GAAI,CAC3FS,EAAWtD,YAAYrB,KAAKgE,SAAS,GAAGrB,UAIxC,IAFA,IAAMiC,EAAgB5E,KAAK+D,YAAcD,EAAqBG,IAAO,MAAQ,KAEpET,EAAI,EAAGA,EAAIxD,KAAKgE,SAASpD,OAAQ4C,KAChCqB,EAAkB3E,SAASe,cAAc,QAC/BC,UAAY,WAC5B2D,EAAgBzE,YAAcwE,EAE9BD,EAAWtD,YAAYwD,GACvBF,EAAWtD,YAAYrB,KAAKgE,SAASR,GAAGb,eAEzC,GAAI3C,KAAK+D,YAAcD,EAAqBK,IAAK,CACpD,IAAMU,KAAkB3E,SAASe,cAAc,SAC/BC,UAAY,WAC5B2D,EAAgBzE,YAAc,OAE9BuE,EAAWtD,YAAYwD,GACvB,IAAMC,EAAe9E,KAAKgE,SAAS,GAAGrB,SACtCmC,EAAarB,UAAUG,IAAI,eAC3Be,EAAWtD,YAAYyD,GAE3B,OAAOH,GAEf,EA9FA,GAgGA,UAAeI,G,YCvGf,IAAKC,E,uFAAL,SAAKA,GACD,uBACA,mCACA,qDACA,+BACA,iDACA,6BAEA,iCACA,6BACA,2BACA,uBACA,4BAZJ,CAAKA,MAAW,KAqJZ,EAAAA,cAtIJ,iBAaI,WAAmBC,EAAkBC,EAAmBC,GAGpD,GAFAnF,KAAKiF,SAAWA,EAEZE,IAAeH,EAAYI,OAC3B,GAAyB,IAArBF,EAAUtE,OACVZ,KAAKkF,UAAY,GACjBlF,KAAKmF,WAAaH,EAAYK,aAC3B,CAEH,IADA,IAAIC,EAAqB,EAClBA,EAAqBJ,EAAUtE,QAA4C,MAAlCsE,EAAUI,IACtDA,IAGJ,GAAIA,IAAuBJ,EAAUtE,OACjCZ,KAAKmF,WAAaH,EAAYO,OAC9BvF,KAAKkF,UAAY,OACd,CAEH,IADA,IAAIM,EAAmBN,EAAUtE,OAAS,EACnC4E,EAAmB,GAAqC,MAAhCN,EAAUM,IACrCA,IAGJxF,KAAKkF,UAAYA,EAAUnE,UAAUuE,EAAoBE,EAAmB,GAEjD,IAAvBF,GAA4BE,IAAqBN,EAAUtE,OAAS,EACpEZ,KAAKmF,WAAaH,EAAYS,SACA,IAAvBH,EACPtF,KAAKmF,WAAaH,EAAYU,UACvBF,IAAqBN,EAAUtE,OAAS,EAC/CZ,KAAKmF,WAAaH,EAAYW,YAE9B3F,KAAKmF,WAAaH,EAAYI,aAK1CpF,KAAKkF,UAAYA,EACjBlF,KAAKmF,WAAaA,EAgF9B,OAjIkB,EAAAS,sBAAd,SAAoCvB,GAChC,MAAqB,MAAdA,GAAmC,MAAdA,GAAmC,MAAdA,GAAmC,MAAdA,GAoDnE,YAAAxB,SAAP,WACI,OAAI7C,KAAKmF,aAAeH,EAAYI,OACzB,IAAMpF,KAAKiF,SAAW,IAAMjF,KAAKkF,UAAY,IAC7ClF,KAAKmF,aAAeH,EAAYa,aAChC,IAAM7F,KAAKiF,SAAW,IAAMjF,KAAKkF,UAAY,IAC7ClF,KAAKmF,aAAeH,EAAYc,sBAChC,IAAM9F,KAAKiF,SAAW,KAAOjF,KAAKkF,UAAY,IAC9ClF,KAAKmF,aAAeH,EAAYe,WAChC,IAAM/F,KAAKiF,SAAW,IAAMjF,KAAKkF,UAAY,IAC7ClF,KAAKmF,aAAeH,EAAYgB,oBAChC,IAAMhG,KAAKiF,SAAW,KAAOjF,KAAKkF,UAAY,IAC9ClF,KAAKmF,aAAeH,EAAYiB,UAChC,IAAMjG,KAAKiF,SAAW,KAAOjF,KAAKkF,UAAY,IAC9ClF,KAAKmF,aAAeH,EAAYW,YAChC,IAAM3F,KAAKiF,SAAW,IAAMjF,KAAKkF,UAAY,KAC7ClF,KAAKmF,aAAeH,EAAYU,UAChC,IAAM1F,KAAKiF,SAAW,KAAOjF,KAAKkF,UAAY,IAC9ClF,KAAKmF,aAAeH,EAAYS,SAChC,IAAMzF,KAAKiF,SAAW,KAAOjF,KAAKkF,UAAY,KAC9ClF,KAAKmF,aAAeH,EAAYO,OAChC,IAAMvF,KAAKiF,SAAW,MACtBjF,KAAKmF,aAAeH,EAAYK,SAChC,IAAMrF,KAAKiF,SAAW,KAG1BjF,KAAKiF,SAAW,IAAMjF,KAAKmF,WAAa,IAAMnF,KAAKkF,WAGvD,YAAAvC,OAAP,WACI,IAAMgC,EAAazE,SAASe,cAAc,OAC1C0D,EAAWzD,UAAY,OACvByD,EAAWd,QAAQrD,WAAaR,KAAKQ,WAAWqC,WAChD8B,EAAWd,QAAQpD,SAAWT,KAAKS,SAASoC,WAE5C,IAAMqD,EAAchG,SAASY,eAAed,KAAKiF,UAC3CkB,EAAejG,SAASY,eAAed,KAAKkF,WAE5CkB,EAAoBlG,SAASe,cAAc,QAqCjD,OApCAmF,EAAkBlF,UAAY,aAE1BlB,KAAKmF,aAAeH,EAAYO,QAChCa,EAAkBhG,YAAc,UAChCuE,EAAWtD,YAAY6E,GACvBvB,EAAWtD,YAAY+E,IAChBpG,KAAKmF,aAAeH,EAAYK,UACvCe,EAAkBhG,YAAc,YAChCuE,EAAWtD,YAAY6E,GACvBvB,EAAWtD,YAAY+E,KAEnBpG,KAAKmF,aAAeH,EAAYI,OAChCgB,EAAkBhG,YAAc,WACzBJ,KAAKmF,aAAeH,EAAYa,aACvCO,EAAkBhG,YAAc,iBACzBJ,KAAKmF,aAAeH,EAAYc,sBACvCM,EAAkBhG,YAAc,0BACzBJ,KAAKmF,aAAeH,EAAYe,WACvCK,EAAkBhG,YAAc,eACzBJ,KAAKmF,aAAeH,EAAYgB,oBACvCI,EAAkBhG,YAAc,wBACzBJ,KAAKmF,aAAeH,EAAYiB,UACvCG,EAAkBhG,YAAc,WACzBJ,KAAKmF,aAAeH,EAAYW,YACvCS,EAAkBhG,YAAc,gBACzBJ,KAAKmF,aAAeH,EAAYU,UACvCU,EAAkBhG,YAAc,cACzBJ,KAAKmF,aAAeH,EAAYS,WACvCW,EAAkBhG,YAAc,cAGpCuE,EAAWtD,YAAY6E,GACvBvB,EAAWtD,YAAY+E,GACvBzB,EAAWtD,YAAY8E,IAGpBxB,GAEf,EAlIA,GAqII,EAAA0B,kB,6DCnJJ,iBAII,WAAmBC,GACftG,KAAKsG,aAAeA,EACpBtG,KAAKuG,OAAS,EA+CtB,OA3CI,sBAAW,sBAAO,C,IAAlB,WACI,OAAOvG,KAAKwG,YAAc,KAAOxG,KAAKsG,aAAatG,KAAKuG,S,gCAI5D,sBAAW,2BAAY,C,IAAvB,WACI,OAAOvG,KAAKuG,Q,gCAMT,YAAAE,KAAP,WAII,OAHKzG,KAAKwG,aACNxG,KAAKuG,SAEFvG,KAAK6B,SAGhB,sBAAW,0BAAW,C,IAAtB,WACI,OAAO7B,KAAKuG,QAAUvG,KAAKsG,aAAa1F,Q,gCAI5C,sBAAW,qBAAM,C,IAAjB,WACI,OAAOZ,KAAKsG,aAAa1F,Q,gCAGtB,YAAAG,UAAP,SAAiB2F,EAAeC,GAC5B,OAAO3G,KAAKsG,aAAavF,UAAU2F,EAAOC,IAIvC,YAAAC,gBAAP,WAGI,IAFA,IAAIC,EAAsB,EAEnB7G,KAAK6B,SAAW7B,KAAK6B,QAAQiF,MAAM,OACtCD,IACA7G,KAAKyG,OAGT,OAAOI,GAEf,EArDA,GAuDA,UAAeE,G,yJCzDf,gBAEA,YACA,SAGA,2BAqJA,OApJkB,EAAArE,YAAd,SAA0BsE,GACtB,IAAMC,EAAmBC,EAAOC,UAAUH,GAE1C,IAAKA,EAAMR,YACP,MAAM,IAAI,UAAaQ,EAAMI,aAAc,qBAG/C,OAAOH,GAII,EAAAE,UAAf,SAAyBH,GACrB,IACIK,EADAC,EAA+B,EAInC,IADAN,EAAMJ,kBACmB,MAAlBI,EAAMnF,SACTyF,IACAN,EAAMP,OACNO,EAAMJ,kBAGV,GAAsB,MAAlBI,EAAMnF,QACN,MAAM,IAAI,UAAamF,EAAMI,aAAc,sBAK/C,GAFAC,EAAOH,EAAOK,eAAeP,IAExBA,EAAMR,aAAiC,MAAlBQ,EAAMnF,QAC5B,MAAM,IAAI,UAAamF,EAAMI,aAAc,qBAG/C,KAAyB,MAAlBJ,EAAMnF,SAAmByF,EAA+B,GAC3DA,IAEAN,EAAMP,OACNO,EAAMJ,kBAGV,GAAIU,EAA+B,EAC/B,MAAM,IAAI,UAAaN,EAAMI,aAAc,+BAG/C,OAAOC,GAGI,EAAAE,eAAf,SAA8BP,GAG1B,OAFAA,EAAMJ,kBAEF,UAAgBxC,uBAAuB4C,EAAMnF,SACtCqF,EAAOM,0BAA0BR,GAEjCE,EAAOO,yBAAyBT,IAIhC,EAAAQ,0BAAf,SAAyCR,GACrC,IAAMU,EAAc,IAAI,UAAgBV,EAAMnF,SAK9C,IAJA6F,EAAYlH,WAAawG,EAAMI,aAE/BJ,EAAMP,OACNO,EAAMJ,kBACmB,MAAlBI,EAAMnF,SACT6F,EAAY1D,SAASS,KAAKyC,EAAOC,UAAUH,IAC3CA,EAAMJ,kBAOV,OAJAc,EAAYjH,SAAWuG,EAAMI,aAE7BM,EAAYpD,eAELoD,GAGI,EAAAD,yBAAf,SAAwCT,GAUpC,IATA,IAQIW,EAREnH,EAAawG,EAAMI,aAErBjC,EAA0B,KAExByC,EAAiBZ,EAAMI,aACzBS,EAAe,KAEfC,EAAkB,MAEdd,EAAMR,aAAiC,MAAlBQ,EAAMnF,SAAiB,CAChD,IAAIkG,GAA0B,EAE9B,GAAqB,OAAjBF,GAAyB,EAAAxB,eAAeT,sBAAsBoB,EAAMnF,SAAU,CAG9E,IAFAgG,EAAeb,EAAMI,gBAEA5G,EACjB,MAAM,IAAI,UAAawG,EAAMI,aAAc,mCAG/C,GAAsB,MAAlBJ,EAAMnF,QACNsD,EAAa,EAAAH,YAAYI,YACtB,GAAsB,MAAlB4B,EAAMnF,QACQ,MAAjBmF,EAAMP,OACNtB,EAAa,EAAAH,YAAYgB,qBAEzBb,EAAa,EAAAH,YAAYe,WACzBgC,GAA0B,QAE3B,GAAsB,MAAlBf,EAAMnF,QACQ,MAAjBmF,EAAMP,OACNtB,EAAa,EAAAH,YAAYc,uBAEzBX,EAAa,EAAAH,YAAYa,aACzBkC,GAA0B,QAE3B,GAAsB,MAAlBf,EAAMnF,QAAiB,CAC9B,GAAqB,MAAjBmF,EAAMP,OACN,MAAM,IAAI,UAAaO,EAAMI,aAAc,0BAE/CjC,EAAa,EAAAH,YAAYiB,UAIzB6B,EADAC,EACkBf,EAAMI,aAAe,EAErBJ,EAAMI,aAI5BW,GACAf,EAAMP,OAId,GAAmB,OAAftB,EACA,MAAM,IAAI,UAAa6B,EAAMI,aAAc,wDAG/CO,EAAgBX,EAAMI,aAEtB,IAAMnC,EAAW+B,EAAMjG,UAAU6G,EAAgBC,GAC3C3C,EAAY8B,EAAMjG,UAAU+G,EAAiBH,GAE7CN,EAAO,IAAI,EAAAhB,eAAepB,EAAUC,EAAWC,GAIrD,GAHAkC,EAAK7G,WAAaA,EAClB6G,EAAK5G,SAAWuG,EAAMI,aAElBC,EAAKlC,aAAe,EAAAH,YAAYK,UAAYsC,IAAkBG,EAC9D,MAAM,IAAI,UAAad,EAAMI,aAAc,oCAG/C,OAAOC,GAEf,EArJA,GAuJA,UAAeH,G,6DC7Jf,iBAII,WAAYnE,EAAkBiF,GAC1BhI,KAAK+C,SAAWA,EAChB/C,KAAKgI,QAAUA,EAMvB,OAHW,YAAAnF,SAAP,WACI,MAAO,6BAA+B7C,KAAK+C,SAAW,KAAO/C,KAAKgI,SAE1E,EAZA,GAcA,UAAeC,ICdXC,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUM,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAGpEK,EAAOD,QClBWJ,CAAoB,M","file":"main.min.js","sourcesContent":["class InputElement {\r\n    public readonly element: HTMLElement;\r\n\r\n    public constructor(elementId: string) {\r\n        this.element = document.getElementById(elementId);\r\n    }\r\n\r\n    public get text(): string {\r\n        return this.element.textContent;\r\n    }\r\n    public set text(text: string) {\r\n        this.element.textContent = text;\r\n    }\r\n\r\n    public clearHighlight(): void {\r\n        this.text = this.element.textContent;\r\n    }\r\n\r\n    public applyClassToSubstring(startIndex: number, endIndex: number, classname: string): void {\r\n        const inputText = this.text;\r\n\r\n        if (startIndex >= inputText.length) {\r\n            startIndex = inputText.length - 1;\r\n            endIndex = inputText.length;\r\n        }\r\n\r\n        const left = document.createTextNode(inputText.substring(0, startIndex));\r\n\r\n        const middle = document.createElement(\"span\");\r\n        middle.className = classname;\r\n        middle.textContent = inputText.substring(startIndex, endIndex);\r\n\r\n        const right = document.createTextNode(inputText.substring(endIndex));\r\n\r\n        this.element.innerHTML = \"\";\r\n        this.element.appendChild(left);\r\n        this.element.appendChild(middle);\r\n        this.element.appendChild(right);\r\n    }\r\n}\r\n\r\nexport default InputElement;\r\n","import ForwardStringReader from \"./parsing/foward-string-reader\";\r\nimport Parser from \"./parsing/parser\";\r\n\r\nimport INode from \"./nodes/inode\";\r\n\r\nimport InputElement from \"./input-element\";\r\nimport ParsingError from \"./parsing/parsing-error\";\r\n\r\n// IE11 polyfills\r\nElement.prototype.matches = Element.prototype.matches || (Element.prototype as any).msMatchesSelector;\r\n\r\nif (typeof Element.prototype.closest === \"undefined\") {\r\n    Element.prototype.closest = function closest(criteria: string): Element | null {\r\n        let current = this;\r\n\r\n        while (current && !current.matches(criteria)) {\r\n            current = current.parentElement;\r\n        }\r\n\r\n        return current;\r\n    };\r\n}\r\n\r\nwindow.addEventListener(\"load\", function analyzeAll(): void {\r\n    const errorMessageElement = document.getElementById(\"error-messages\");\r\n    const inputElement = new InputElement(\"input\");\r\n    const analyzeButton = document.getElementById(\"trigger-analyze\");\r\n    const resultElement = document.getElementById(\"result\");\r\n\r\n    let lastText = inputElement.text;\r\n    function updateResult(): void {\r\n        const textToAnalyze: string = inputElement.text;\r\n\r\n        if (textToAnalyze === lastText) {\r\n            lastText = textToAnalyze;\r\n            return;\r\n        }\r\n        lastText = textToAnalyze;\r\n\r\n        const stringReader = new ForwardStringReader(textToAnalyze);\r\n\r\n        let rootNode: INode;\r\n        try {\r\n            rootNode = Parser.parseString(stringReader);\r\n\r\n            errorMessageElement.textContent = \"\";\r\n            resultElement.innerHTML = \"\";\r\n            resultElement.appendChild(rootNode.toHTML());\r\n        } catch (e) {\r\n            resultElement.innerHTML = \"\";\r\n            errorMessageElement.textContent = e.toString();\r\n\r\n            const parsingError = e as ParsingError;\r\n            inputElement.applyClassToSubstring(parsingError.position, parsingError.position + 1, \"error\");\r\n        }\r\n    }\r\n\r\n    analyzeButton.addEventListener(\"click\", updateResult);\r\n    inputElement.element.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n        if (event.keyCode === 13) { // enter\r\n            event.preventDefault();\r\n            updateResult();\r\n        }\r\n    });\r\n\r\n    function highlightHoveredNode(event: MouseEvent): void {\r\n        const hoveredNode = (event.target as HTMLElement).closest(\"#result .node\") as HTMLElement;\r\n\r\n        let highlightCleared = false;\r\n\r\n        const nodes = resultElement.querySelectorAll(\".node\");\r\n        for (let i = 0; i < nodes.length; i++) { // tslint:disable-line:prefer-for-of\r\n            if (nodes[i] !== hoveredNode && nodes[i].classList.contains(\"hovered\")) {\r\n                highlightCleared = true;\r\n                nodes[i].classList.remove(\"hovered\");\r\n            }\r\n        }\r\n\r\n        if (hoveredNode !== null && !hoveredNode.classList.contains(\"hovered\")) {\r\n            hoveredNode.classList.add(\"hovered\");\r\n\r\n            const startIndex = +hoveredNode.dataset.startIndex;\r\n            const endIndex = +hoveredNode.dataset.endIndex;\r\n            inputElement.applyClassToSubstring(startIndex, endIndex, \"hovered\");\r\n        } else if (highlightCleared) {\r\n            inputElement.clearHighlight();\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", highlightHoveredNode);\r\n\r\n    inputElement.text = \"&(atleastonenode=*)(|(&(input=operator*)(numberofnodes>=1))(&(node=*comparison*)(lefthandvalue=*)(righthandvalue=*)))(allnodes=valid)\";\r\n    updateResult();\r\n});\r\n","import ParsingError from \"../parsing/parsing-error\";\r\nimport INode from \"./inode\";\r\n\r\nenum AggregationOperation {\r\n    AND,\r\n    OR,\r\n    NOT,\r\n}\r\n\r\nclass AggregationNode implements INode {\r\n    public static isAggregationCharacter(character: string): boolean {\r\n        return character === \"&\" || character === \"|\" || character === \"!\";\r\n    }\r\n\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public operation: AggregationOperation = null;\r\n    public children: INode[] = null;\r\n\r\n    public constructor(operation: string) {\r\n        this.children = [];\r\n\r\n        if (operation === \"&\") {\r\n            this.operation = AggregationOperation.AND;\r\n        } else if (operation === \"|\") {\r\n            this.operation = AggregationOperation.OR;\r\n        } else if (operation === \"!\") {\r\n            this.operation = AggregationOperation.NOT;\r\n        } else {\r\n            this.operation = null;\r\n        }\r\n    }\r\n\r\n    public testValidity(): void {\r\n        switch (this.operation) {\r\n            case AggregationOperation.AND:\r\n            case AggregationOperation.OR:\r\n                if (this.children.length < 2) {\r\n                    throw new ParsingError(this.endIndex, \"Missing opening parenthesis. AND and OR nodes must have at least 2 subnodes.\");\r\n                }\r\n                break;\r\n            case AggregationOperation.NOT:\r\n                if (this.children.length === 0) {\r\n                    throw new ParsingError(this.endIndex, \"Missing opening parenthesis. NOT nodes must have exactly 1 subnode.\");\r\n                } else if (this.children.length >= 2) {\r\n                    throw new ParsingError(this.children[0].endIndex, \"NOT nodes cannot have more than 1 subnode.\");\r\n                }\r\n                break;\r\n            default:\r\n                throw new ParsingError(this.startIndex, \"\");\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.operation === AggregationOperation.NOT) {\r\n            return \"(!\" + this.children[0].toString() + \")\";\r\n        }\r\n\r\n        const childrenStrList: string[] = [];\r\n        for (const child of this.children) {\r\n            childrenStrList.push(child.toString());\r\n        }\r\n\r\n        if (this.operation === AggregationOperation.AND) {\r\n            return \"(&\" + childrenStrList.join(\"\") + \")\";\r\n        } else if (this.operation === AggregationOperation.OR) {\r\n            return \"(|\" + childrenStrList.join(\"\") + \")\";\r\n        }\r\n        return \"<empty>\";\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        if (this.operation === AggregationOperation.AND || this.operation === AggregationOperation.OR) {\r\n            divElement.appendChild(this.children[0].toHTML());\r\n\r\n            const operatorText = (this.operation === AggregationOperation.AND) ? \"and\" : \"or\";\r\n\r\n            for (let i = 1; i < this.children.length; i++) {\r\n                const operatorElement = document.createElement(\"div\");\r\n                operatorElement.className = \"operator\";\r\n                operatorElement.textContent = operatorText;\r\n\r\n                divElement.appendChild(operatorElement);\r\n                divElement.appendChild(this.children[i].toHTML());\r\n            }\r\n        } else if (this.operation === AggregationOperation.NOT) {\r\n            const operatorElement = document.createElement(\"span\");\r\n            operatorElement.className = \"operator\";\r\n            operatorElement.textContent = \"not \";\r\n\r\n            divElement.appendChild(operatorElement);\r\n            const childElement = this.children[0].toHTML();\r\n            childElement.classList.add(\"node-inline\");\r\n            divElement.appendChild(childElement);\r\n        }\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport default AggregationNode;\r\n","import INode from \"./inode\";\r\n\r\nenum EComparison {\r\n    EQUALS,\r\n    GREATER_THAN,\r\n    GREATER_OR_EQUAL_THAN,\r\n    LOWER_THAN,\r\n    LOWER_OR_EQUAL_THAN,\r\n    PROXIMITY,\r\n\r\n    STARTS_WITH,\r\n    ENDS_WITH,\r\n    CONTAINS,\r\n    EXISTS,\r\n    IS_EMPTY,\r\n}\r\n\r\nclass ComparisonNode implements INode {\r\n    public static isComparisonCharacter(character: string): boolean {\r\n        return character === \"=\" || character === \"<\" || character === \">\" || character === \"~\";\r\n    }\r\n\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public comparison: EComparison;\r\n\r\n    public lefthand: string;\r\n    public righthand: string;\r\n\r\n    public constructor(lefthand: string, righthand: string, comparison: EComparison) {\r\n        this.lefthand = lefthand;\r\n\r\n        if (comparison === EComparison.EQUALS) {\r\n            if (righthand.length === 0) {\r\n                this.righthand = \"\";\r\n                this.comparison = EComparison.IS_EMPTY;\r\n            } else {\r\n                let realRighthandStart = 0;\r\n                while (realRighthandStart < righthand.length && righthand[realRighthandStart] === \"*\") {\r\n                    realRighthandStart++;\r\n                }\r\n\r\n                if (realRighthandStart === righthand.length) {\r\n                    this.comparison = EComparison.EXISTS;\r\n                    this.righthand = \"\";\r\n                } else {\r\n                    let realRighthandEnd = righthand.length - 1;\r\n                    while (realRighthandEnd > 0 && righthand[realRighthandEnd] === \"*\") {\r\n                        realRighthandEnd--;\r\n                    }\r\n\r\n                    this.righthand = righthand.substring(realRighthandStart, realRighthandEnd + 1);\r\n\r\n                    if (realRighthandStart !== 0 && realRighthandEnd !== righthand.length - 1) {\r\n                        this.comparison = EComparison.CONTAINS;\r\n                    } else if (realRighthandStart !== 0) {\r\n                        this.comparison = EComparison.ENDS_WITH;\r\n                    } else if (realRighthandEnd !== righthand.length - 1) {\r\n                        this.comparison = EComparison.STARTS_WITH;\r\n                    } else {\r\n                        this.comparison = EComparison.EQUALS;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.righthand = righthand;\r\n            this.comparison = comparison;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.comparison === EComparison.EQUALS) {\r\n            return \"(\" + this.lefthand + \"=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.GREATER_THAN) {\r\n            return \"(\" + this.lefthand + \">\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.GREATER_OR_EQUAL_THAN) {\r\n            return \"(\" + this.lefthand + \">=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.LOWER_THAN) {\r\n            return \"(\" + this.lefthand + \"<\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.LOWER_OR_EQUAL_THAN) {\r\n            return \"(\" + this.lefthand + \"<=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.PROXIMITY) {\r\n            return \"(\" + this.lefthand + \"~=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.STARTS_WITH) {\r\n            return \"(\" + this.lefthand + \"=\" + this.righthand + \"*)\";\r\n        } else if (this.comparison === EComparison.ENDS_WITH) {\r\n            return \"(\" + this.lefthand + \"=*\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.CONTAINS) {\r\n            return \"(\" + this.lefthand + \"=*\" + this.righthand + \"*)\";\r\n        } else if (this.comparison === EComparison.EXISTS) {\r\n            return \"(\" + this.lefthand + \"=*)\";\r\n        } else if (this.comparison === EComparison.IS_EMPTY) {\r\n            return \"(\" + this.lefthand + \"=)\";\r\n        }\r\n\r\n        return this.lefthand + \" \" + this.comparison + \" \" + this.righthand;\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        const leftElement = document.createTextNode(this.lefthand);\r\n        const rightElement = document.createTextNode(this.righthand);\r\n\r\n        const comparisonElement = document.createElement(\"span\");\r\n        comparisonElement.className = \"comparison\";\r\n\r\n        if (this.comparison === EComparison.EXISTS) {\r\n            comparisonElement.textContent = \" exists\";\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n        } else if (this.comparison === EComparison.IS_EMPTY) {\r\n            comparisonElement.textContent = \" is empty\";\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n        } else {\r\n            if (this.comparison === EComparison.EQUALS) {\r\n                comparisonElement.textContent = \" equals \";\r\n            } else if (this.comparison === EComparison.GREATER_THAN) {\r\n                comparisonElement.textContent = \" greater than \";\r\n            } else if (this.comparison === EComparison.GREATER_OR_EQUAL_THAN) {\r\n                comparisonElement.textContent = \" greater or equal than \";\r\n            } else if (this.comparison === EComparison.LOWER_THAN) {\r\n                comparisonElement.textContent = \" lower than \";\r\n            } else if (this.comparison === EComparison.LOWER_OR_EQUAL_THAN) {\r\n                comparisonElement.textContent = \" lower or equal than \";\r\n            } else if (this.comparison === EComparison.PROXIMITY) {\r\n                comparisonElement.textContent = \" approx \";\r\n            } else if (this.comparison === EComparison.STARTS_WITH) {\r\n                comparisonElement.textContent = \" starts with \";\r\n            } else if (this.comparison === EComparison.ENDS_WITH) {\r\n                comparisonElement.textContent = \" ends with \";\r\n            } else if (this.comparison === EComparison.CONTAINS) {\r\n                comparisonElement.textContent = \" contains \";\r\n            }\r\n\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n            divElement.appendChild(rightElement);\r\n        }\r\n\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport {\r\n    ComparisonNode,\r\n    EComparison,\r\n};\r\n","/** Class for reading string character by character, only in forward direction.\r\n * It still allows substrings to be extracted from the string.\r\n */\r\nclass ForwardStringReader {\r\n    private readonly stringToRead: string;\r\n    private cursor: number;\r\n\r\n    public constructor(stringToRead: string) {\r\n        this.stringToRead = stringToRead;\r\n        this.cursor = 0;\r\n    }\r\n\r\n    /** Retrieves the character at the cursor's current position, or null if it reached end of string. */\r\n    public get current(): string | null {\r\n        return this.endOfString ? null : this.stringToRead[this.cursor];\r\n    }\r\n\r\n    /** Retrieves the 0-based current position of the cursor. */\r\n    public get currentIndex(): number {\r\n        return this.cursor;\r\n    }\r\n\r\n    /** Moves the cursor forward and returns the new selected character,\r\n     * or null if the cursor reached the end of the string.\r\n     */\r\n    public next(): string | null {\r\n        if (!this.endOfString) {\r\n            this.cursor++;\r\n        }\r\n        return this.current;\r\n    }\r\n\r\n    public get endOfString(): boolean {\r\n        return this.cursor >= this.stringToRead.length;\r\n    }\r\n\r\n    /** Returns the length of the read string. */\r\n    public get length(): number {\r\n        return this.stringToRead.length;\r\n    }\r\n\r\n    public substring(start: number, end: number): string {\r\n        return this.stringToRead.substring(start, end);\r\n    }\r\n\r\n    /* Returns the number of skipped whitespace characters */\r\n    public skipWhitespaces(): number {\r\n        let numberOfWhitespaces = 0;\r\n\r\n        while (this.current && this.current.match(/\\s/)) {\r\n            numberOfWhitespaces++;\r\n            this.next();\r\n        }\r\n\r\n        return numberOfWhitespaces;\r\n    }\r\n}\r\n\r\nexport default ForwardStringReader;\r\n","import ForwardStringReader from \"./foward-string-reader\";\r\nimport ParsingError from \"./parsing-error\";\r\n\r\nimport AggregationNode from \"../nodes/aggregation-node\";\r\nimport { ComparisonNode, EComparison } from \"../nodes/comparison-node\";\r\nimport LdapNode from \"../nodes/inode\";\r\n\r\nclass Parser {\r\n    public static parseString(input: ForwardStringReader): LdapNode {\r\n        const result: LdapNode = Parser.parseNode(input);\r\n\r\n        if (!input.endOfString) {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /** Leaves the cursor after the last ')' */\r\n    private static parseNode(input: ForwardStringReader): LdapNode {\r\n        let nbClosingParenthesisExpected = 0;\r\n        let node: LdapNode = null;\r\n\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            nbClosingParenthesisExpected++;\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (input.current === \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid empty node\");\r\n        }\r\n\r\n        node = Parser.parseNodeInner(input);\r\n\r\n        if (!input.endOfString && input.current !== \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        while (input.current === \")\" && nbClosingParenthesisExpected > 0) {\r\n            nbClosingParenthesisExpected--;\r\n\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (nbClosingParenthesisExpected > 0) {\r\n            throw new ParsingError(input.currentIndex, \"Missing closing parenthesis\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private static parseNodeInner(input: ForwardStringReader): LdapNode {\r\n        input.skipWhitespaces();\r\n\r\n        if (AggregationNode.isAggregationCharacter(input.current)) {\r\n            return Parser.parseNodeInnerAggregation(input);\r\n        } else {\r\n            return Parser.parseNodeInnerComparison(input);\r\n        }\r\n    }\r\n\r\n    private static parseNodeInnerAggregation(input: ForwardStringReader): AggregationNode {\r\n        const partialNode = new AggregationNode(input.current);\r\n        partialNode.startIndex = input.currentIndex;\r\n\r\n        input.next();\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            partialNode.children.push(Parser.parseNode(input));\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        partialNode.endIndex = input.currentIndex;\r\n\r\n        partialNode.testValidity();\r\n\r\n        return partialNode;\r\n    }\r\n\r\n    private static parseNodeInnerComparison(input: ForwardStringReader): ComparisonNode {\r\n        const startIndex = input.currentIndex;\r\n\r\n        let comparison: EComparison = null;\r\n\r\n        const leftStartIndex = input.currentIndex;\r\n        let leftEndIndex = null;\r\n\r\n        let rightStartIndex = null;\r\n        let rightEndIndex = null;\r\n        while (!input.endOfString && input.current !== \")\") {\r\n            let needToReadNextCharacter = true;\r\n\r\n            if (leftEndIndex === null && ComparisonNode.isComparisonCharacter(input.current)) {\r\n                leftEndIndex = input.currentIndex;\r\n\r\n                if (leftEndIndex === startIndex) {\r\n                    throw new ParsingError(input.currentIndex, \"Missing left term of comparison\");\r\n                }\r\n\r\n                if (input.current === \"=\") {\r\n                    comparison = EComparison.EQUALS;\r\n                } else if (input.current === \"<\") {\r\n                    if (input.next() === \"=\") {\r\n                        comparison = EComparison.LOWER_OR_EQUAL_THAN;\r\n                    } else {\r\n                        comparison = EComparison.LOWER_THAN;\r\n                        needToReadNextCharacter = false; // next character already read\r\n                    }\r\n                } else if (input.current === \">\") {\r\n                    if (input.next() === \"=\") {\r\n                        comparison = EComparison.GREATER_OR_EQUAL_THAN;\r\n                    } else {\r\n                        comparison = EComparison.GREATER_THAN;\r\n                        needToReadNextCharacter = false; // next character already read\r\n                    }\r\n                } else if (input.current === \"~\") {\r\n                    if (input.next() !== \"=\") {\r\n                        throw new ParsingError(input.currentIndex, \"Expected '=' character\");\r\n                    }\r\n                    comparison = EComparison.PROXIMITY;\r\n                }\r\n\r\n                if (needToReadNextCharacter) {\r\n                    rightStartIndex = input.currentIndex + 1;\r\n                } else {\r\n                    rightStartIndex = input.currentIndex;\r\n                }\r\n            }\r\n\r\n            if (needToReadNextCharacter) {\r\n                input.next();\r\n            }\r\n        }\r\n\r\n        if (comparison === null) {\r\n            throw new ParsingError(input.currentIndex, \"Expected comparison operator '=', '<=', '>=' or '~='\");\r\n        }\r\n\r\n        rightEndIndex = input.currentIndex;\r\n\r\n        const lefthand = input.substring(leftStartIndex, leftEndIndex);\r\n        const righthand = input.substring(rightStartIndex, rightEndIndex);\r\n\r\n        const node = new ComparisonNode(lefthand, righthand, comparison);\r\n        node.startIndex = startIndex;\r\n        node.endIndex = input.currentIndex;\r\n\r\n        if (node.comparison !== EComparison.IS_EMPTY && rightEndIndex === rightStartIndex) {\r\n            throw new ParsingError(input.currentIndex, \"Missing right term of comparison\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n","/* Class for storing parsing errors */\r\nclass ParsingError {\r\n    public readonly position: number;\r\n    public readonly message: string;\r\n\r\n    constructor(position: number, message: string) {\r\n        this.position = position;\r\n        this.message = message;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"Parsing error at position \" + this.position + \": \" + this.message;\r\n    }\r\n}\r\n\r\nexport default ParsingError;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"sourceRoot":""}