{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parsing/parsing-error.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/parsing/foward-string-reader.ts","webpack:///./src/ts/parsing/parser.ts","webpack:///./src/ts/nodes/aggregation-node.ts","webpack:///./src/ts/nodes/comparison-node.ts","webpack:///./src/ts/input-element.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","position","message","this","toString","ParsingError","Element","matches","msMatchesSelector","closest","criteria","current","parentElement","window","addEventListener","errorMessageElement","document","getElementById","inputElement","analyzeButton","resultElement","lastText","text","updateResult","textToAnalyze","rootNode","stringReader","parseString","textContent","innerHTML","appendChild","toHTML","e","parsingError","applyClassToSubstring","element","event","keyCode","preventDefault","hoveredNode","target","highlightCleared","nodes","querySelectorAll","length","classList","contains","remove","clearHighlight","add","startIndex","dataset","endIndex","stringToRead","cursor","endOfString","next","substring","start","end","skipWhitespaces","numberOfWhitespaces","match","ForwardStringReader","input","result","Parser","parseNode","currentIndex","node","nbClosingParenthesisExpected","parseNodeInner","isAggregationCharacter","parseNodeInnerAggregation","parseNodeInnerComparison","partialNode","children","push","testValidity","rightEndIndex","comparison","leftStartIndex","leftEndIndex","rightStartIndex","needToReadNextCharacter","ComparisonNode","isComparisonCharacter","EComparison","EQUALS","LOWER_OR_EQUAL_THAN","LOWER_THAN","GREATER_OR_EQUAL_THAN","GREATER_THAN","PROXIMITY","lefthand","righthand","IS_EMPTY","AggregationOperation","operation","AND","OR","NOT","character","childrenStrList","child","join","divElement","createElement","className","operatorText","operatorElement","childElement","AggregationNode","realRighthandStart","EXISTS","realRighthandEnd","CONTAINS","ENDS_WITH","STARTS_WITH","leftElement","createTextNode","rightElement","comparisonElement","elementId","classname","inputText","left","middle","right","InputElement"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Class for storing parsing errors */\r\nclass ParsingError {\r\n    public readonly position: number;\r\n    public readonly message: string;\r\n\r\n    constructor(position: number, message: string) {\r\n        this.position = position;\r\n        this.message = message;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"Parsing error at position \" + this.position + \": \" + this.message;\r\n    }\r\n}\r\n\r\nexport default ParsingError;\r\n","import ForwardStringReader from \"./parsing/foward-string-reader\";\r\nimport Parser from \"./parsing/parser\";\r\n\r\nimport INode from \"./nodes/inode\";\r\n\r\nimport InputElement from \"./input-element\";\r\nimport ParsingError from \"./parsing/parsing-error\";\r\n\r\n// IE11 polyfills\r\nElement.prototype.matches = Element.prototype.matches || (Element.prototype as any).msMatchesSelector;\r\n\r\nif (typeof Element.prototype.closest === \"undefined\") {\r\n    Element.prototype.closest = function closest(criteria: string): Element | null {\r\n        let current = this;\r\n\r\n        while (current && !current.matches(criteria)) {\r\n            current = current.parentElement;\r\n        }\r\n\r\n        return current;\r\n    };\r\n}\r\n\r\nwindow.addEventListener(\"load\", function analyzeAll(): void {\r\n    const errorMessageElement = document.getElementById(\"error-messages\");\r\n    const inputElement = new InputElement(\"input\");\r\n    const analyzeButton = document.getElementById(\"trigger-analyze\");\r\n    const resultElement = document.getElementById(\"result\");\r\n\r\n    let lastText = inputElement.text;\r\n    function updateResult(): void {\r\n        const textToAnalyze: string = inputElement.text;\r\n\r\n        if (textToAnalyze === lastText) {\r\n            lastText = textToAnalyze;\r\n            return;\r\n        }\r\n        lastText = textToAnalyze;\r\n\r\n        const stringReader = new ForwardStringReader(textToAnalyze);\r\n\r\n        let rootNode: INode;\r\n        try {\r\n            rootNode = Parser.parseString(stringReader);\r\n\r\n            errorMessageElement.textContent = \"\";\r\n            resultElement.innerHTML = \"\";\r\n            resultElement.appendChild(rootNode.toHTML());\r\n        } catch (e) {\r\n            resultElement.innerHTML = \"\";\r\n            errorMessageElement.textContent = e.toString();\r\n\r\n            const parsingError = e as ParsingError;\r\n            inputElement.applyClassToSubstring(parsingError.position, parsingError.position + 1, \"error\");\r\n        }\r\n    }\r\n\r\n    analyzeButton.addEventListener(\"click\", updateResult);\r\n    inputElement.element.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n        if (event.keyCode === 13) { // enter\r\n            event.preventDefault();\r\n            updateResult();\r\n        }\r\n    });\r\n\r\n    function highlightHoveredNode(event: MouseEvent): void {\r\n        const hoveredNode = (event.target as HTMLElement).closest(\"#result .node\") as HTMLElement;\r\n\r\n        let highlightCleared = false;\r\n\r\n        const nodes = resultElement.querySelectorAll(\".node\");\r\n        for (let i = 0; i < nodes.length; i++) { // tslint:disable-line:prefer-for-of\r\n            if (nodes[i] !== hoveredNode && nodes[i].classList.contains(\"hovered\")) {\r\n                highlightCleared = true;\r\n                nodes[i].classList.remove(\"hovered\");\r\n            }\r\n        }\r\n\r\n        if (hoveredNode !== null && !hoveredNode.classList.contains(\"hovered\")) {\r\n            hoveredNode.classList.add(\"hovered\");\r\n\r\n            const startIndex = +hoveredNode.dataset.startIndex;\r\n            const endIndex = +hoveredNode.dataset.endIndex;\r\n            inputElement.applyClassToSubstring(startIndex, endIndex, \"hovered\");\r\n        } else if (highlightCleared) {\r\n            inputElement.clearHighlight();\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", highlightHoveredNode);\r\n\r\n    inputElement.text = \"&(atleastonenode=*)(|(&(input=operator*)(numberofnodes>=1))(&(node=*comparison*)(lefthandvalue=*)(righthandvalue=*)))(allnodes=valid)\";\r\n    updateResult();\r\n});\r\n","/** Class for reading string character by character, only in forward direction.\r\n * It still allows substrings to be extracted from the string.\r\n */\r\nclass ForwardStringReader {\r\n    private readonly stringToRead: string;\r\n    private cursor: number;\r\n\r\n    public constructor(stringToRead: string) {\r\n        this.stringToRead = stringToRead;\r\n        this.cursor = 0;\r\n    }\r\n\r\n    /** Retrieves the character at the cursor's current position, or null if it reached end of string. */\r\n    public get current(): string | null {\r\n        return this.endOfString ? null : this.stringToRead[this.cursor];\r\n    }\r\n\r\n    /** Retrieves the 0-based current position of the cursor. */\r\n    public get currentIndex(): number {\r\n        return this.cursor;\r\n    }\r\n\r\n    /** Moves the cursor forward and returns the new selected character,\r\n     * or null if the cursor reached the end of the string.\r\n     */\r\n    public next(): string | null {\r\n        if (!this.endOfString) {\r\n            this.cursor++;\r\n        }\r\n        return this.current;\r\n    }\r\n\r\n    public get endOfString(): boolean {\r\n        return this.cursor >= this.stringToRead.length;\r\n    }\r\n\r\n    /** Returns the length of the read string. */\r\n    public get length(): number {\r\n        return this.stringToRead.length;\r\n    }\r\n\r\n    public substring(start: number, end: number): string {\r\n        return this.stringToRead.substring(start, end);\r\n    }\r\n\r\n    /* Returns the number of skipped whitespace characters */\r\n    public skipWhitespaces(): number {\r\n        let numberOfWhitespaces = 0;\r\n\r\n        while (this.current && this.current.match(/\\s/)) {\r\n            numberOfWhitespaces++;\r\n            this.next();\r\n        }\r\n\r\n        return numberOfWhitespaces;\r\n    }\r\n}\r\n\r\nexport default ForwardStringReader;\r\n","import ForwardStringReader from \"./foward-string-reader\";\r\nimport ParsingError from \"./parsing-error\";\r\n\r\nimport AggregationNode from \"../nodes/aggregation-node\";\r\nimport { ComparisonNode, EComparison } from \"../nodes/comparison-node\";\r\nimport LdapNode from \"../nodes/inode\";\r\n\r\nclass Parser {\r\n    public static parseString(input: ForwardStringReader): LdapNode {\r\n        const result: LdapNode = Parser.parseNode(input);\r\n\r\n        if (!input.endOfString) {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /** Leaves the cursor after the last ')' */\r\n    private static parseNode(input: ForwardStringReader): LdapNode {\r\n        let nbClosingParenthesisExpected = 0;\r\n        let node: LdapNode = null;\r\n\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            nbClosingParenthesisExpected++;\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (input.current === \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid empty node\");\r\n        }\r\n\r\n        node = Parser.parseNodeInner(input);\r\n\r\n        if (!input.endOfString && input.current !== \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        while (input.current === \")\" && nbClosingParenthesisExpected > 0) {\r\n            nbClosingParenthesisExpected--;\r\n\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (nbClosingParenthesisExpected > 0) {\r\n            throw new ParsingError(input.currentIndex, \"Missing closing parenthesis\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private static parseNodeInner(input: ForwardStringReader): LdapNode {\r\n        input.skipWhitespaces();\r\n\r\n        if (AggregationNode.isAggregationCharacter(input.current)) {\r\n            return Parser.parseNodeInnerAggregation(input);\r\n        } else {\r\n            return Parser.parseNodeInnerComparison(input);\r\n        }\r\n    }\r\n\r\n    private static parseNodeInnerAggregation(input: ForwardStringReader): AggregationNode {\r\n        const partialNode = new AggregationNode(input.current);\r\n        partialNode.startIndex = input.currentIndex;\r\n\r\n        input.next();\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            partialNode.children.push(Parser.parseNode(input));\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        partialNode.endIndex = input.currentIndex;\r\n\r\n        partialNode.testValidity();\r\n\r\n        return partialNode;\r\n    }\r\n\r\n    private static parseNodeInnerComparison(input: ForwardStringReader): ComparisonNode {\r\n        const startIndex = input.currentIndex;\r\n\r\n        let comparison: EComparison = null;\r\n\r\n        const leftStartIndex = input.currentIndex;\r\n        let leftEndIndex = null;\r\n\r\n        let rightStartIndex = null;\r\n        let rightEndIndex = null;\r\n        while (!input.endOfString && input.current !== \")\") {\r\n            let needToReadNextCharacter = true;\r\n\r\n            if (leftEndIndex === null && ComparisonNode.isComparisonCharacter(input.current)) {\r\n                leftEndIndex = input.currentIndex;\r\n\r\n                if (leftEndIndex === startIndex) {\r\n                    throw new ParsingError(input.currentIndex, \"Missing left term of comparison\");\r\n                }\r\n\r\n                if (input.current === \"=\") {\r\n                    comparison = EComparison.EQUALS;\r\n                } else if (input.current === \"<\") {\r\n                    if (input.next() === \"=\") {\r\n                        comparison = EComparison.LOWER_OR_EQUAL_THAN;\r\n                    } else {\r\n                        comparison = EComparison.LOWER_THAN;\r\n                        needToReadNextCharacter = false; // next character already read\r\n                    }\r\n                } else if (input.current === \">\") {\r\n                    if (input.next() === \"=\") {\r\n                        comparison = EComparison.GREATER_OR_EQUAL_THAN;\r\n                    } else {\r\n                        comparison = EComparison.GREATER_THAN;\r\n                        needToReadNextCharacter = false; // next character already read\r\n                    }\r\n                } else if (input.current === \"~\") {\r\n                    if (input.next() !== \"=\") {\r\n                        throw new ParsingError(input.currentIndex, \"Expected '=' character\");\r\n                    }\r\n                    comparison = EComparison.PROXIMITY;\r\n                }\r\n\r\n                if (needToReadNextCharacter) {\r\n                    rightStartIndex = input.currentIndex + 1;\r\n                } else {\r\n                    rightStartIndex = input.currentIndex;\r\n                }\r\n            }\r\n\r\n            if (needToReadNextCharacter) {\r\n                input.next();\r\n            }\r\n        }\r\n\r\n        if (comparison === null) {\r\n            throw new ParsingError(input.currentIndex, \"Expected comparison operator '=', '<=', '>=' or '~='\");\r\n        }\r\n\r\n        rightEndIndex = input.currentIndex;\r\n\r\n        const lefthand = input.substring(leftStartIndex, leftEndIndex);\r\n        const righthand = input.substring(rightStartIndex, rightEndIndex);\r\n\r\n        const node = new ComparisonNode(lefthand, righthand, comparison);\r\n        node.startIndex = startIndex;\r\n        node.endIndex = input.currentIndex;\r\n\r\n        if (node.comparison !== EComparison.IS_EMPTY && rightEndIndex === rightStartIndex) {\r\n            throw new ParsingError(input.currentIndex, \"Missing right term of comparison\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n","import ParsingError from \"../parsing/parsing-error\";\r\nimport INode from \"./inode\";\r\n\r\nenum AggregationOperation {\r\n    AND,\r\n    OR,\r\n    NOT,\r\n}\r\n\r\nclass AggregationNode implements INode {\r\n    public static isAggregationCharacter(character: string): boolean {\r\n        return character === \"&\" || character === \"|\" || character === \"!\";\r\n    }\r\n\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public operation: AggregationOperation = null;\r\n    public children: INode[] = null;\r\n\r\n    public constructor(operation: string) {\r\n        this.children = [];\r\n\r\n        if (operation === \"&\") {\r\n            this.operation = AggregationOperation.AND;\r\n        } else if (operation === \"|\") {\r\n            this.operation = AggregationOperation.OR;\r\n        } else if (operation === \"!\") {\r\n            this.operation = AggregationOperation.NOT;\r\n        } else {\r\n            this.operation = null;\r\n        }\r\n    }\r\n\r\n    public testValidity(): void {\r\n        switch (this.operation) {\r\n            case AggregationOperation.AND:\r\n            case AggregationOperation.OR:\r\n                if (this.children.length < 2) {\r\n                    throw new ParsingError(this.endIndex, \"Missing opening parenthesis. AND and OR nodes must have at least 2 subnodes.\");\r\n                }\r\n                break;\r\n            case AggregationOperation.NOT:\r\n                if (this.children.length === 0) {\r\n                    throw new ParsingError(this.endIndex, \"Missing opening parenthesis. NOT nodes must have exactly 1 subnode.\");\r\n                } else if (this.children.length >= 2) {\r\n                    throw new ParsingError(this.children[0].endIndex, \"NOT nodes cannot have more than 1 subnode.\");\r\n                }\r\n                break;\r\n            default:\r\n                throw new ParsingError(this.startIndex, \"\");\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.operation === AggregationOperation.NOT) {\r\n            return \"(!\" + this.children[0].toString() + \")\";\r\n        }\r\n\r\n        const childrenStrList: string[] = [];\r\n        for (const child of this.children) {\r\n            childrenStrList.push(child.toString());\r\n        }\r\n\r\n        if (this.operation === AggregationOperation.AND) {\r\n            return \"(&\" + childrenStrList.join(\"\") + \")\";\r\n        } else if (this.operation === AggregationOperation.OR) {\r\n            return \"(|\" + childrenStrList.join(\"\") + \")\";\r\n        }\r\n        return \"<empty>\";\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        if (this.operation === AggregationOperation.AND || this.operation === AggregationOperation.OR) {\r\n            divElement.appendChild(this.children[0].toHTML());\r\n\r\n            const operatorText = (this.operation === AggregationOperation.AND) ? \"and\" : \"or\";\r\n\r\n            for (let i = 1; i < this.children.length; i++) {\r\n                const operatorElement = document.createElement(\"div\");\r\n                operatorElement.className = \"operator\";\r\n                operatorElement.textContent = operatorText;\r\n\r\n                divElement.appendChild(operatorElement);\r\n                divElement.appendChild(this.children[i].toHTML());\r\n            }\r\n        } else if (this.operation === AggregationOperation.NOT) {\r\n            const operatorElement = document.createElement(\"span\");\r\n            operatorElement.className = \"operator\";\r\n            operatorElement.textContent = \"not \";\r\n\r\n            divElement.appendChild(operatorElement);\r\n            const childElement = this.children[0].toHTML();\r\n            childElement.classList.add(\"node-inline\");\r\n            divElement.appendChild(childElement);\r\n        }\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport default AggregationNode;\r\n","import INode from \"./inode\";\r\n\r\nenum EComparison {\r\n    EQUALS,\r\n    GREATER_THAN,\r\n    GREATER_OR_EQUAL_THAN,\r\n    LOWER_THAN,\r\n    LOWER_OR_EQUAL_THAN,\r\n    PROXIMITY,\r\n\r\n    STARTS_WITH,\r\n    ENDS_WITH,\r\n    CONTAINS,\r\n    EXISTS,\r\n    IS_EMPTY,\r\n}\r\n\r\nclass ComparisonNode implements INode {\r\n    public static isComparisonCharacter(character: string): boolean {\r\n        return character === \"=\" || character === \"<\" || character === \">\" || character === \"~\";\r\n    }\r\n\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public comparison: EComparison;\r\n\r\n    public lefthand: string;\r\n    public righthand: string;\r\n\r\n    public constructor(lefthand: string, righthand: string, comparison: EComparison) {\r\n        this.lefthand = lefthand;\r\n\r\n        if (comparison === EComparison.EQUALS) {\r\n            if (righthand.length === 0) {\r\n                this.righthand = \"\";\r\n                this.comparison = EComparison.IS_EMPTY;\r\n            } else {\r\n                let realRighthandStart = 0;\r\n                while (realRighthandStart < righthand.length && righthand[realRighthandStart] === \"*\") {\r\n                    realRighthandStart++;\r\n                }\r\n\r\n                if (realRighthandStart === righthand.length) {\r\n                    this.comparison = EComparison.EXISTS;\r\n                    this.righthand = \"\";\r\n                } else {\r\n                    let realRighthandEnd = righthand.length - 1;\r\n                    while (realRighthandEnd > 0 && righthand[realRighthandEnd] === \"*\") {\r\n                        realRighthandEnd--;\r\n                    }\r\n\r\n                    this.righthand = righthand.substring(realRighthandStart, realRighthandEnd + 1);\r\n\r\n                    if (realRighthandStart !== 0 && realRighthandEnd !== righthand.length - 1) {\r\n                        this.comparison = EComparison.CONTAINS;\r\n                    } else if (realRighthandStart !== 0) {\r\n                        this.comparison = EComparison.ENDS_WITH;\r\n                    } else if (realRighthandEnd !== righthand.length - 1) {\r\n                        this.comparison = EComparison.STARTS_WITH;\r\n                    } else {\r\n                        this.comparison = EComparison.EQUALS;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.righthand = righthand;\r\n            this.comparison = comparison;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.comparison === EComparison.EQUALS) {\r\n            return \"(\" + this.lefthand + \"=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.GREATER_THAN) {\r\n            return \"(\" + this.lefthand + \">\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.GREATER_OR_EQUAL_THAN) {\r\n            return \"(\" + this.lefthand + \">=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.LOWER_THAN) {\r\n            return \"(\" + this.lefthand + \"<\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.LOWER_OR_EQUAL_THAN) {\r\n            return \"(\" + this.lefthand + \"<=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.PROXIMITY) {\r\n            return \"(\" + this.lefthand + \"~=\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.STARTS_WITH) {\r\n            return \"(\" + this.lefthand + \"=\" + this.righthand + \"*)\";\r\n        } else if (this.comparison === EComparison.ENDS_WITH) {\r\n            return \"(\" + this.lefthand + \"=*\" + this.righthand + \")\";\r\n        } else if (this.comparison === EComparison.CONTAINS) {\r\n            return \"(\" + this.lefthand + \"=*\" + this.righthand + \"*)\";\r\n        } else if (this.comparison === EComparison.EXISTS) {\r\n            return \"(\" + this.lefthand + \"=*)\";\r\n        } else if (this.comparison === EComparison.IS_EMPTY) {\r\n            return \"(\" + this.lefthand + \"=)\";\r\n        }\r\n\r\n        return this.lefthand + \" \" + this.comparison + \" \" + this.righthand;\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        const leftElement = document.createTextNode(this.lefthand);\r\n        const rightElement = document.createTextNode(this.righthand);\r\n\r\n        const comparisonElement = document.createElement(\"span\");\r\n        comparisonElement.className = \"comparison\";\r\n\r\n        if (this.comparison === EComparison.EXISTS) {\r\n            comparisonElement.textContent = \" exists\";\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n        } else if (this.comparison === EComparison.IS_EMPTY) {\r\n            comparisonElement.textContent = \" is empty\";\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n        } else {\r\n            if (this.comparison === EComparison.EQUALS) {\r\n                comparisonElement.textContent = \" equals \";\r\n            } else if (this.comparison === EComparison.GREATER_THAN) {\r\n                comparisonElement.textContent = \" greater than \";\r\n            } else if (this.comparison === EComparison.GREATER_OR_EQUAL_THAN) {\r\n                comparisonElement.textContent = \" greater or equal than \";\r\n            } else if (this.comparison === EComparison.LOWER_THAN) {\r\n                comparisonElement.textContent = \" lower than \";\r\n            } else if (this.comparison === EComparison.LOWER_OR_EQUAL_THAN) {\r\n                comparisonElement.textContent = \" lower or equal than \";\r\n            } else if (this.comparison === EComparison.PROXIMITY) {\r\n                comparisonElement.textContent = \" approx \";\r\n            } else if (this.comparison === EComparison.STARTS_WITH) {\r\n                comparisonElement.textContent = \" starts with \";\r\n            } else if (this.comparison === EComparison.ENDS_WITH) {\r\n                comparisonElement.textContent = \" ends with \";\r\n            } else if (this.comparison === EComparison.CONTAINS) {\r\n                comparisonElement.textContent = \" contains \";\r\n            }\r\n\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n            divElement.appendChild(rightElement);\r\n        }\r\n\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport {\r\n    ComparisonNode,\r\n    EComparison,\r\n};\r\n","class InputElement {\r\n    public readonly element: HTMLElement;\r\n\r\n    public constructor(elementId: string) {\r\n        this.element = document.getElementById(elementId);\r\n    }\r\n\r\n    public get text(): string {\r\n        return this.element.textContent;\r\n    }\r\n    public set text(text: string) {\r\n        this.element.textContent = text;\r\n    }\r\n\r\n    public clearHighlight(): void {\r\n        this.text = this.element.textContent;\r\n    }\r\n\r\n    public applyClassToSubstring(startIndex: number, endIndex: number, classname: string): void {\r\n        const inputText = this.text;\r\n\r\n        if (startIndex >= inputText.length) {\r\n            startIndex = inputText.length - 1;\r\n            endIndex = inputText.length;\r\n        }\r\n\r\n        const left = document.createTextNode(inputText.substring(0, startIndex));\r\n\r\n        const middle = document.createElement(\"span\");\r\n        middle.className = classname;\r\n        middle.textContent = inputText.substring(startIndex, endIndex);\r\n\r\n        const right = document.createTextNode(inputText.substring(endIndex));\r\n\r\n        this.element.innerHTML = \"\";\r\n        this.element.appendChild(left);\r\n        this.element.appendChild(middle);\r\n        this.element.appendChild(right);\r\n    }\r\n}\r\n\r\nexport default InputElement;\r\n"],"sourceRoot":""}