{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/main.ts","webpack:///./src/ts/parsing/foward-string-reader.ts","webpack:///./src/ts/parsing/parser.ts","webpack:///./src/ts/parsing/parsing-error.ts","webpack:///./src/ts/nodes/aggregation-node.ts","webpack:///./src/ts/nodes/comparison-node.ts","webpack:///./src/ts/input-element.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","testedStrings","analyze","reader","parseString","toString","e","window","addEventListener","toAnalyze","console","log","errorMessageElement","document","getElementById","inputElement","analyzeButton","resultElement","lastText","text","updateResult","textToAnalyze","rootNode","stringReader","textContent","innerHTML","appendChild","toHTML","parsingError","applyClassToSubstring","position","event","hoveredNode","target","closest","highlightCleared","nodes","querySelectorAll","length","classList","contains","remove","clearHighlight","add","startIndex","dataset","endIndex","stringToRead","this","cursor","endOfString","next","current","substring","start","end","skipWhitespaces","numberOfWhitespaces","match","ForwardStringReader","input","result","Parser","parseNode","currentIndex","node","nbClosingParenthesisExpected","parseNodeInner","isAggregationCharacter","parseNodeInnerAggregation","parseNodeInnerComparison","partialNode","children","push","isValid","rightEndIndex","comparison","leftStartIndex","leftEndIndex","rightStartIndex","ComparisonNode","isComparisonCharacter","EComparison","EQUALS","LOWER_THAN","GREATER_THAN","PROXIMITY","lefthand","righthand","message","ParsingError","AggregationOperation","operation","AND","OR","NOT","character","childrenStrList","child","join","divElement","createElement","className","operatorText","operatorElement","childElement","AggregationNode","realRighthandStart","EXISTS","realRighthandEnd","CONTAINS","STARTS_WITH","ENDS_WITH","leftElement","createTextNode","rightElement","comparisonElement","elementId","element","style","overflow","height","scrollHeight","classname","inputText","left","middle","right","InputElement"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import ForwardStringReader from \"./parsing/foward-string-reader\";\r\nimport Parser from \"./parsing/parser\";\r\n\r\nimport INode from \"./nodes/inode\";\r\n\r\nimport InputElement from \"./input-element\";\r\nimport ParsingError from \"./parsing/parsing-error\";\r\n\r\nconst testedStrings: string[] = [\r\n    \"\",\r\n    \"()\",\r\n    \"((()))\",\r\n    \"  (  ( ()) )\",\r\n    \"(\",\r\n    \" ( (())\",\r\n    \"(()&\",\r\n    \"(hihi)\",\r\n    \"( (hihi)       )\",\r\n    \"&(hoho)(huhu)\",\r\n    \"  |   (hoho)   (huhu)\",\r\n    \"&((  |(hihi)(huhu)))   (huhu)\",\r\n    \"&()(huhu)(haha)\",\r\n    \"!(huhu)\",\r\n    \"!(huhu)(haha)\",\r\n];\r\n\r\nfunction analyze(reader: ForwardStringReader): string {\r\n    try {\r\n        const node: INode = Parser.parseString(reader);\r\n        return \"valid '\" + node.toString() + \"'\";\r\n    } catch (e) {\r\n        return e.toString();\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\", function analyzeAll(): void {\r\n    for (const toAnalyze of testedStrings) {\r\n        console.log(toAnalyze + \" : \" + analyze(new ForwardStringReader(toAnalyze)));\r\n    }\r\n\r\n    const errorMessageElement = document.getElementById(\"error-messages\");\r\n    const inputElement = new InputElement(\"input\");\r\n    const analyzeButton = document.getElementById(\"trigger-analyze\");\r\n    const resultElement = document.getElementById(\"result\");\r\n\r\n    let lastText = inputElement.text;\r\n    function updateResult(): void {\r\n        const textToAnalyze: string = inputElement.text;\r\n        \r\n        if (textToAnalyze === lastText) {\r\n            lastText = textToAnalyze;\r\n            return;\r\n        }\r\n        lastText = textToAnalyze;\r\n\r\n        const stringReader = new ForwardStringReader(textToAnalyze);\r\n\r\n        let rootNode: INode;\r\n        try {\r\n            rootNode = Parser.parseString(stringReader);\r\n\r\n            errorMessageElement.textContent = \"\";\r\n            resultElement.innerHTML = \"\";\r\n            resultElement.appendChild(rootNode.toHTML());\r\n        } catch (e) {\r\n            resultElement.innerHTML = \"\";\r\n            errorMessageElement.textContent = e.toString();\r\n\r\n            const parsingError = e as ParsingError;\r\n            inputElement.applyClassToSubstring(parsingError.position, parsingError.position + 1, \"error\");\r\n        }\r\n    }\r\n\r\n    analyzeButton.addEventListener(\"click\", updateResult);\r\n\r\n    function highlightHoveredNode(event: MouseEvent): void {\r\n        const hoveredNode = (event.target as HTMLElement).closest(\"#result .node\") as HTMLElement;\r\n\r\n        let highlightCleared = false;\r\n\r\n        const nodes = resultElement.querySelectorAll(\".node\");\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            if (nodes[i] !== hoveredNode && nodes[i].classList.contains(\"hovered\")) {\r\n                highlightCleared = true;\r\n                nodes[i].classList.remove(\"hovered\");\r\n            }\r\n        }\r\n\r\n        if (hoveredNode !== null && !hoveredNode.classList.contains(\"hovered\")) {\r\n            hoveredNode.classList.add(\"hovered\");\r\n\r\n            const startIndex = +hoveredNode.dataset.startIndex;\r\n            const endIndex = +hoveredNode.dataset.endIndex;\r\n            inputElement.applyClassToSubstring(startIndex, endIndex, \"hovered\");\r\n        } else if (highlightCleared) {\r\n            inputElement.clearHighlight();\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", highlightHoveredNode);\r\n\r\n    inputElement.text = \"&((  |(hihi)(huhu)))   (huhu)\";\r\n    updateResult();\r\n});\r\n\r\n","/** Class for reading string character by character, only in forward direction.\r\n * It still allows substrings to be extracted from the string.\r\n */\r\nclass ForwardStringReader {\r\n    private readonly stringToRead: string;\r\n    private cursor: number;\r\n\r\n    public constructor(stringToRead: string) {\r\n        this.stringToRead = stringToRead;\r\n        this.cursor = 0;\r\n    }\r\n\r\n    /** Retrieves the character at the cursor's current position, or null if it reached end of string. */\r\n    public get current(): string | null {\r\n        return this.endOfString ? null : this.stringToRead[this.cursor];\r\n    }\r\n\r\n    /** Retrieves the 0-based current position of the cursor. */\r\n    public get currentIndex(): number {\r\n        return this.cursor;\r\n    }\r\n\r\n    /** Moves the cursor forward and returns the new selected character, or null if te cursor reached the end of the string. */\r\n    public next(): string | null {\r\n        if (!this.endOfString) {\r\n            this.cursor++;\r\n        }\r\n        return this.current;\r\n    }\r\n\r\n    public get endOfString(): boolean {\r\n        return this.cursor >= this.stringToRead.length;\r\n    }\r\n\r\n    /** Returns the length of the read string. */\r\n    public get length(): number {\r\n        return this.stringToRead.length;\r\n    }\r\n\r\n    public substring(start: number, end: number): string {\r\n        return this.stringToRead.substring(start, end);\r\n    }\r\n\r\n    /* Returns the number of skipped whitespace characters */\r\n    public skipWhitespaces(): number {\r\n        let numberOfWhitespaces = 0;\r\n\r\n        while (this.current && this.current.match(/\\s/)) {\r\n            numberOfWhitespaces++;\r\n            this.next();\r\n        }\r\n\r\n        return numberOfWhitespaces;\r\n    }\r\n}\r\n\r\nexport default ForwardStringReader;\r\n","import ForwardStringReader from \"./foward-string-reader\";\r\nimport ParsingError from \"./parsing-error\";\r\n\r\nimport AggregationNode from \"../nodes/aggregation-node\";\r\nimport { ComparisonNode, EComparison } from \"../nodes/comparison-node\";\r\nimport LdapNode from \"../nodes/inode\";\r\n\r\nclass Parser {\r\n    public static parseString(input: ForwardStringReader): LdapNode {\r\n        const result: LdapNode = Parser.parseNode(input);\r\n\r\n        if (!input.endOfString) {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /** Leaves the cursor after the last ')' */\r\n    private static parseNode(input: ForwardStringReader): LdapNode {\r\n        let nbClosingParenthesisExpected = 0;\r\n        let node: LdapNode = null;\r\n\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            nbClosingParenthesisExpected++;\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (input.current === \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid empty node\");\r\n        }\r\n\r\n        node = Parser.parseNodeInner(input);\r\n\r\n        if (!input.endOfString && input.current !== \")\") {\r\n            throw new ParsingError(input.currentIndex, \"Invalid character\");\r\n        }\r\n\r\n        while (input.current === \")\" && nbClosingParenthesisExpected > 0) {\r\n            nbClosingParenthesisExpected--;\r\n\r\n            input.next();\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        if (nbClosingParenthesisExpected > 0) {\r\n            throw new ParsingError(input.currentIndex, \"Missing closing parenthesis\");\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private static parseNodeInner(input: ForwardStringReader): LdapNode {\r\n        input.skipWhitespaces();\r\n\r\n        if (AggregationNode.isAggregationCharacter(input.current)) {\r\n            return Parser.parseNodeInnerAggregation(input);\r\n        } else {\r\n            return Parser.parseNodeInnerComparison(input);\r\n        }\r\n    }\r\n\r\n    private static parseNodeInnerAggregation(input: ForwardStringReader): AggregationNode {\r\n        const partialNode = new AggregationNode(input.current);\r\n        partialNode.startIndex = input.currentIndex;\r\n\r\n        input.next();\r\n        input.skipWhitespaces();\r\n        while (input.current === \"(\") {\r\n            partialNode.children.push(Parser.parseNode(input));\r\n            input.skipWhitespaces();\r\n        }\r\n\r\n        partialNode.endIndex = input.currentIndex;\r\n\r\n        if (!partialNode.isValid()) {\r\n            throw new ParsingError(input.currentIndex, \"Invalid agregation node\");\r\n        }\r\n\r\n        return partialNode;\r\n    }\r\n\r\n    private static parseNodeInnerComparison(input: ForwardStringReader): ComparisonNode {\r\n        const startIndex = input.currentIndex;\r\n\r\n        let comparison: EComparison = null;\r\n\r\n        const leftStartIndex = input.currentIndex;\r\n        let leftEndIndex = null;\r\n\r\n        let rightStartIndex = null;\r\n        let rightEndIndex = null;\r\n        while (!input.endOfString && input.current !== \")\") {\r\n            if (leftEndIndex === null && ComparisonNode.isComparisonCharacter(input.current)) {\r\n                leftEndIndex = input.currentIndex;\r\n\r\n                if (leftEndIndex === startIndex) {\r\n                    throw new ParsingError(input.currentIndex, \"Missing left term of comparison\")\r\n                }\r\n\r\n                if (input.current === \"=\") {\r\n                    comparison = EComparison.EQUALS;\r\n                } else if (input.current === \"<\") {\r\n                    if (input.next() !== \"=\") {\r\n                        throw new ParsingError(input.currentIndex, \"Expected '=' character\");\r\n                    }\r\n                    comparison = EComparison.LOWER_THAN;\r\n                } else if (input.current === \">\") {\r\n                    if (input.next() !== \"=\") {\r\n                        throw new ParsingError(input.currentIndex, \"Expected '=' character\");\r\n                    }\r\n                    comparison = EComparison.GREATER_THAN;\r\n                } else if (input.current === \"~\") {\r\n                    if (input.next() !== \"=\") {\r\n                        throw new ParsingError(input.currentIndex, \"Expected '=' character\");\r\n                    }\r\n                    comparison = EComparison.PROXIMITY;\r\n                }\r\n\r\n                rightStartIndex = input.currentIndex + 1;\r\n            }\r\n\r\n            input.next();\r\n        }\r\n\r\n        if (comparison === null) {\r\n            throw new ParsingError(input.currentIndex, \"Expected comparison operator '=', '<=', '>=' or '~='\")\r\n        }\r\n\r\n        rightEndIndex = input.currentIndex;\r\n\r\n        if (rightEndIndex === rightStartIndex) {\r\n            throw new ParsingError(input.currentIndex, \"Missing right term of comparison\");\r\n        }\r\n\r\n        const lefthand = input.substring(leftStartIndex, leftEndIndex);\r\n        const righthand = input.substring(rightStartIndex, rightEndIndex);\r\n\r\n        const node = new ComparisonNode(lefthand, righthand, comparison);\r\n        node.startIndex = startIndex;\r\n        node.endIndex = input.currentIndex;\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nexport default Parser;\r\n","/* Class for storing parsing errors */\r\nclass ParsingError {\r\n    public readonly position: number;\r\n    public readonly message: string;\r\n\r\n    constructor(position: number, message: string) {\r\n        this.position = position;\r\n        this.message = message;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"Parsing error at position \" + this.position + \": \" + this.message;\r\n    }\r\n}\r\n\r\nexport default ParsingError;\r\n","import INode from \"./inode\";\r\n\r\nenum AggregationOperation {\r\n    AND,\r\n    OR,\r\n    NOT,\r\n}\r\n\r\nclass AggregationNode implements INode {\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n    \r\n    public operation: AggregationOperation = null;\r\n    public children: INode[] = null;\r\n\r\n    public static isAggregationCharacter(character: string): boolean {\r\n        return character === \"&\" || character === \"|\" || character === \"!\";\r\n    }\r\n\r\n    public constructor(operation: string) {\r\n        this.children = [];\r\n\r\n        if (operation === \"&\") {\r\n            this.operation = AggregationOperation.AND;\r\n        } else if (operation === \"|\") {\r\n            this.operation = AggregationOperation.OR;\r\n        } else if (operation === \"!\") {\r\n            this.operation = AggregationOperation.NOT;\r\n        } else {\r\n            this.operation = null;\r\n        }\r\n    }\r\n\r\n    public isValid(): boolean {\r\n        switch (this.operation) {\r\n            case AggregationOperation.AND:\r\n            case AggregationOperation.OR:\r\n                return this.children.length >= 2;\r\n            case AggregationOperation.NOT:\r\n                return this.children.length === 1;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.operation === AggregationOperation.NOT) {\r\n            return \"NOT \" + this.children[0].toString();\r\n        } else if (this.operation === AggregationOperation.AND) {\r\n            const childrenStrList: string[] = [];\r\n            for (const child of this.children) {\r\n                childrenStrList.push(child.toString());\r\n            }\r\n            return \"(\" + childrenStrList.join(\") AND (\") + \")\";\r\n        } else if (this.operation === AggregationOperation.OR) {\r\n            const childrenStrList: string[] = [];\r\n            for (const child of this.children) {\r\n                childrenStrList.push(child.toString());\r\n            }\r\n            return \"(\" + childrenStrList.join(\") OR (\") + \")\";\r\n        }\r\n\r\n        return \"<empty>\";\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\");\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        if (this.operation === AggregationOperation.AND || this.operation === AggregationOperation.OR) {\r\n            divElement.appendChild(this.children[0].toHTML());\r\n\r\n            const operatorText = (this.operation === AggregationOperation.AND) ? \"and\" : \"or\";\r\n\r\n            for (let i = 1; i < this.children.length; i++) {\r\n                const operatorElement = document.createElement(\"div\");\r\n                operatorElement.className = \"operator\";\r\n                operatorElement.textContent = operatorText;\r\n\r\n                divElement.appendChild(operatorElement);\r\n                divElement.appendChild(this.children[i].toHTML());\r\n            }\r\n        } else if (this.operation === AggregationOperation.NOT) {\r\n            const operatorElement = document.createElement(\"span\");\r\n            operatorElement.className = \"operator\";\r\n            operatorElement.textContent = \"not \";\r\n\r\n            divElement.appendChild(operatorElement);\r\n            const childElement = this.children[0].toHTML();\r\n            childElement.classList.add(\"node-inline\");\r\n            divElement.appendChild(childElement);\r\n        }\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport default AggregationNode;\r\n","import INode from \"./inode\";\r\n\r\nenum EComparison {\r\n    EQUALS,\r\n    GREATER_THAN,\r\n    LOWER_THAN,\r\n    PROXIMITY,\r\n\r\n    STARTS_WITH,\r\n    ENDS_WITH,\r\n    CONTAINS,\r\n    EXISTS,\r\n}\r\n\r\nclass ComparisonNode implements INode {\r\n    public startIndex: number;\r\n    public endIndex: number;\r\n\r\n    public comparison: EComparison;\r\n\r\n    public lefthand: string;\r\n    public righthand: string;\r\n\r\n    public static isComparisonCharacter(character: string): boolean {\r\n        return character === \"=\" || character === \"<\" || character === \">\" || character === \"~\";\r\n    }\r\n\r\n    public constructor(lefthand: string, righthand: string, comparison: EComparison) {\r\n        this.lefthand = lefthand;\r\n\r\n        if (comparison === EComparison.EQUALS) {\r\n            let realRighthandStart = 0;\r\n            while (realRighthandStart < righthand.length && righthand[realRighthandStart] === \"*\") {\r\n                realRighthandStart++;\r\n            }\r\n\r\n            if (realRighthandStart === righthand.length) {\r\n                this.comparison = EComparison.EXISTS;\r\n                this.righthand = \"\";\r\n            } else {\r\n                let realRighthandEnd = righthand.length - 1;\r\n                while (realRighthandEnd > 0 && righthand[realRighthandEnd] === \"*\") {\r\n                    realRighthandEnd--;\r\n                }\r\n\r\n                this.righthand = righthand.substring(realRighthandStart, realRighthandEnd + 1);\r\n\r\n                if (realRighthandStart !== 0 && realRighthandEnd !== righthand.length - 1) {\r\n                    this.comparison = EComparison.CONTAINS;\r\n                } else if (realRighthandStart !== 0) {\r\n                    this.comparison = EComparison.STARTS_WITH;\r\n                } else if (realRighthandEnd !== righthand.length - 1) {\r\n                    this.comparison = EComparison.ENDS_WITH;\r\n                } else {\r\n                    this.comparison = EComparison.EQUALS;\r\n                }\r\n            }\r\n        } else {\r\n            this.righthand = righthand;\r\n            this.comparison = comparison;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.lefthand + \" \" + this.comparison + \" \" + this.righthand;\r\n    }\r\n\r\n    public toHTML(): HTMLElement {\r\n        const divElement = document.createElement(\"div\")\r\n        divElement.className = \"node\";\r\n        divElement.dataset.startIndex = this.startIndex.toString();\r\n        divElement.dataset.endIndex = this.endIndex.toString();\r\n\r\n        const leftElement = document.createTextNode(this.lefthand);\r\n        const rightElement = document.createTextNode(this.righthand);\r\n\r\n        const comparisonElement = document.createElement(\"span\");\r\n        comparisonElement.className = \"comparison\";\r\n\r\n        if (this.comparison === EComparison.EXISTS) {\r\n            comparisonElement.textContent = \" exists \";\r\n\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n        } else {\r\n            if (this.comparison === EComparison.EQUALS) {\r\n                comparisonElement.textContent = \" equals \";\r\n            } else if (this.comparison === EComparison.GREATER_THAN) {\r\n                comparisonElement.textContent = \" greater than \";\r\n            } else if (this.comparison === EComparison.LOWER_THAN) {\r\n                comparisonElement.textContent = \" lower than \";\r\n            } else if (this.comparison === EComparison.PROXIMITY) {\r\n                comparisonElement.textContent = \" approx \";\r\n            } else if (this.comparison === EComparison.STARTS_WITH) {\r\n                comparisonElement.textContent = \" starts with \";\r\n            } else if (this.comparison === EComparison.ENDS_WITH) {\r\n                comparisonElement.textContent = \" ends with \";\r\n            } else if (this.comparison === EComparison.CONTAINS) {\r\n                comparisonElement.textContent = \" contains \";\r\n            }\r\n\r\n            divElement.appendChild(leftElement);\r\n            divElement.appendChild(comparisonElement);\r\n            divElement.appendChild(rightElement);\r\n        }\r\n\r\n        return divElement;\r\n    }\r\n}\r\n\r\nexport {\r\n    ComparisonNode,\r\n    EComparison,\r\n};","class InputElement {\r\n    private element: HTMLElement;\r\n\r\n    public constructor(elementId: string) {\r\n        const element = document.getElementById(elementId);\r\n\r\n        element.addEventListener(\"keyup\", function updateInputHeight(): void {\r\n            const inputPadding = 8;\r\n\r\n            element.style.overflow = 'hidden';\r\n            element.style.height = \"0\";\r\n            element.style.height = (element.scrollHeight - 2 * inputPadding) + 'px';\r\n        });\r\n\r\n        this.element = element;\r\n    }\r\n\r\n    public get text(): string {\r\n        return this.element.textContent;\r\n    }\r\n    public set text(text: string) {\r\n        this.element.textContent = text;\r\n    }\r\n\r\n    public clearHighlight(): void {\r\n        this.text = this.element.textContent;\r\n    }\r\n\r\n    public applyClassToSubstring(startIndex: number, endIndex: number, classname: string): void {\r\n        const inputText = this.text;\r\n\r\n        const left = document.createTextNode(inputText.substring(0, startIndex));\r\n\r\n        const middle = document.createElement(\"span\");\r\n        middle.className = classname;\r\n        middle.textContent = inputText.substring(startIndex, endIndex);\r\n\r\n        const right = document.createTextNode(inputText.substring(endIndex));\r\n\r\n        this.element.innerHTML = \"\";\r\n        this.element.appendChild(left);\r\n        this.element.appendChild(middle);\r\n        this.element.appendChild(right);\r\n    }\r\n}\r\n\r\nexport default InputElement;"],"sourceRoot":""}